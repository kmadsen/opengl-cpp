; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\kmadsen\Google Drive\OpenGL_Projects\Starter\Starter\vboplane.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__real@00000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	??_7VBOPlane@@6B@				; VBOPlane::`vftable'
PUBLIC	??0Drawable@@QAE@XZ				; Drawable::Drawable
PUBLIC	__$ArrayPad$
PUBLIC	??0VBOPlane@@QAE@MMHH@Z				; VBOPlane::VBOPlane
PUBLIC	??_R4VBOPlane@@6B@				; VBOPlane::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVVBOPlane@@@8				; VBOPlane `RTTI Type Descriptor'
PUBLIC	??_R3VBOPlane@@8				; VBOPlane::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VBOPlane@@8				; VBOPlane::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VBOPlane@@8			; VBOPlane::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@Drawable@@8			; Drawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVDrawable@@@8				; Drawable `RTTI Type Descriptor'
PUBLIC	??_R3Drawable@@8				; Drawable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Drawable@@8				; Drawable::`RTTI Base Class Array'
PUBLIC	?render@VBOPlane@@UBEXXZ			; VBOPlane::render
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp____glewEnableVertexAttribArray:DWORD
EXTRN	__imp____glewVertexAttribPointer:DWORD
EXTRN	__imp____glewBufferData:DWORD
EXTRN	__imp____glewBindBuffer:DWORD
EXTRN	__imp____glewGenBuffers:DWORD
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp____glewBindVertexArray:DWORD
EXTRN	__imp____glewGenVertexArrays:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R2Drawable@@8
; File c:\users\kmadsen\google drive\opengl_projects\starter\starter\vboplane.cpp
rdata$r	SEGMENT
??_R2Drawable@@8 DD FLAT:??_R1A@?0A@EA@Drawable@@8	; Drawable::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Drawable@@8
rdata$r	SEGMENT
??_R3Drawable@@8 DD 00H					; Drawable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Drawable@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDrawable@@@8
_DATA	SEGMENT
??_R0?AVDrawable@@@8 DD FLAT:??_7type_info@@6B@		; Drawable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDrawable@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@Drawable@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Drawable@@8 DD FLAT:??_R0?AVDrawable@@@8	; Drawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Drawable@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@VBOPlane@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VBOPlane@@8 DD FLAT:??_R0?AVVBOPlane@@@8	; VBOPlane::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VBOPlane@@8
rdata$r	ENDS
;	COMDAT ??_R2VBOPlane@@8
rdata$r	SEGMENT
??_R2VBOPlane@@8 DD FLAT:??_R1A@?0A@EA@VBOPlane@@8	; VBOPlane::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Drawable@@8
rdata$r	ENDS
;	COMDAT ??_R3VBOPlane@@8
rdata$r	SEGMENT
??_R3VBOPlane@@8 DD 00H					; VBOPlane::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2VBOPlane@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVBOPlane@@@8
_DATA	SEGMENT
??_R0?AVVBOPlane@@@8 DD FLAT:??_7type_info@@6B@		; VBOPlane `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVBOPlane@@', 00H
_DATA	ENDS
;	COMDAT ??_R4VBOPlane@@6B@
rdata$r	SEGMENT
??_R4VBOPlane@@6B@ DD 00H				; VBOPlane::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVVBOPlane@@@8
	DD	FLAT:??_R3VBOPlane@@8
rdata$r	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT ??_7VBOPlane@@6B@
CONST	SEGMENT
??_7VBOPlane@@6B@ DD FLAT:??_R4VBOPlane@@6B@		; VBOPlane::`vftable'
	DD	FLAT:?render@VBOPlane@@UBEXXZ
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0VBOPlane@@QAE@MMHH@Z
_TEXT	SEGMENT
$T17414 = -536						; size = 4
$T17415 = -524						; size = 4
$T17416 = -512						; size = 4
$T17417 = -500						; size = 4
$T17418 = -488						; size = 4
$T17419 = -476						; size = 4
_handle$ = -272						; size = 12
_j$17252 = -252						; size = 4
_i$17248 = -240						; size = 4
_idx$ = -228						; size = 4
_nextRowStart$ = -216					; size = 4
_rowStart$ = -204					; size = 4
_j$17241 = -192						; size = 4
_i$17237 = -180						; size = 4
_tidx$ = -168						; size = 4
_vidx$ = -156						; size = 4
_z$ = -144						; size = 4
_x$ = -132						; size = 4
_texj$ = -120						; size = 4
_texi$ = -108						; size = 4
_jFactor$ = -96						; size = 4
_iFactor$ = -84						; size = 4
_z2$ = -72						; size = 4
_x2$ = -60						; size = 4
_el$ = -48						; size = 4
_tex$ = -36						; size = 4
_v$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_xsize$ = 8						; size = 4
_zsize$ = 12						; size = 4
_xdivs$ = 16						; size = 4
_zdivs$ = 20						; size = 4
??0VBOPlane@@QAE@MMHH@Z PROC				; VBOPlane::VBOPlane, COMDAT
; _this$ = ecx

; 9    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 540				; 0000021cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-540]
	mov	ecx, 135				; 00000087H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Drawable@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7VBOPlane@@6B@

; 10   :     glGenVertexArrays( 1, &vaoHandle );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esi, esp
	push	eax
	push	1
	mov	ecx, DWORD PTR __imp____glewGenVertexArrays
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 11   :     glBindVertexArray(vaoHandle);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR __imp____glewBindVertexArray
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 12   :     faces = xdivs * zdivs;

	mov	eax, DWORD PTR _xdivs$[ebp]
	imul	eax, DWORD PTR _zdivs$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 13   :     float * v = new float[3 * (xdivs + 1) * (zdivs + 1)];

	mov	eax, DWORD PTR _xdivs$[ebp]
	add	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _zdivs$[ebp]
	add	ecx, 1
	imul	eax, ecx
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17414[ebp], eax
	mov	eax, DWORD PTR $T17414[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 14   :     float * tex = new float[2 * (xdivs + 1) * (zdivs + 1)];

	mov	eax, DWORD PTR _xdivs$[ebp]
	lea	eax, DWORD PTR [eax+eax+2]
	mov	ecx, DWORD PTR _zdivs$[ebp]
	add	ecx, 1
	imul	eax, ecx
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17415[ebp], eax
	mov	eax, DWORD PTR $T17415[ebp]
	mov	DWORD PTR _tex$[ebp], eax

; 15   :     unsigned int * el = new unsigned int[6 * xdivs * zdivs];

	mov	eax, DWORD PTR _xdivs$[ebp]
	imul	eax, 6
	imul	eax, DWORD PTR _zdivs$[ebp]
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17416[ebp], eax
	mov	eax, DWORD PTR $T17416[ebp]
	mov	DWORD PTR _el$[ebp], eax

; 16   : 
; 17   :     float x2 = xsize / 2.0f;

	fld	DWORD PTR _xsize$[ebp]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR _x2$[ebp]

; 18   :     float z2 = zsize / 2.0f;

	fld	DWORD PTR _zsize$[ebp]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR _z2$[ebp]

; 19   :     float iFactor = (float)zsize / zdivs;

	fild	DWORD PTR _zdivs$[ebp]
	fdivr	DWORD PTR _zsize$[ebp]
	fstp	DWORD PTR _iFactor$[ebp]

; 20   :     float jFactor = (float)xsize / xdivs;

	fild	DWORD PTR _xdivs$[ebp]
	fdivr	DWORD PTR _xsize$[ebp]
	fstp	DWORD PTR _jFactor$[ebp]

; 21   :     float texi = 1.0f / zdivs;

	fild	DWORD PTR _zdivs$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _texi$[ebp]

; 22   :     float texj = 1.0f / xdivs;

	fild	DWORD PTR _xdivs$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _texj$[ebp]

; 23   :     float x, z;
; 24   :     int vidx = 0, tidx = 0;

	mov	DWORD PTR _vidx$[ebp], 0
	mov	DWORD PTR _tidx$[ebp], 0

; 25   :     for( int i = 0; i <= zdivs; i++ ) {

	mov	DWORD PTR _i$17237[ebp], 0
	jmp	SHORT $LN12@VBOPlane
$LN11@VBOPlane:
	mov	eax, DWORD PTR _i$17237[ebp]
	add	eax, 1
	mov	DWORD PTR _i$17237[ebp], eax
$LN12@VBOPlane:
	mov	eax, DWORD PTR _i$17237[ebp]
	cmp	eax, DWORD PTR _zdivs$[ebp]
	jg	$LN10@VBOPlane

; 26   :         z = iFactor * i - z2;

	fild	DWORD PTR _i$17237[ebp]
	fmul	DWORD PTR _iFactor$[ebp]
	fsub	DWORD PTR _z2$[ebp]
	fstp	DWORD PTR _z$[ebp]

; 27   :         for( int j = 0; j <= xdivs; j++ ) {

	mov	DWORD PTR _j$17241[ebp], 0
	jmp	SHORT $LN9@VBOPlane
$LN8@VBOPlane:
	mov	eax, DWORD PTR _j$17241[ebp]
	add	eax, 1
	mov	DWORD PTR _j$17241[ebp], eax
$LN9@VBOPlane:
	mov	eax, DWORD PTR _j$17241[ebp]
	cmp	eax, DWORD PTR _xdivs$[ebp]
	jg	$LN7@VBOPlane

; 28   :             x = jFactor * j - x2;

	fild	DWORD PTR _j$17241[ebp]
	fmul	DWORD PTR _jFactor$[ebp]
	fsub	DWORD PTR _x2$[ebp]
	fstp	DWORD PTR _x$[ebp]

; 29   :             v[vidx] = x;

	mov	eax, DWORD PTR _vidx$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [ecx+eax*4]

; 30   :             v[vidx+1] = 0.0f;

	mov	eax, DWORD PTR _vidx$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fldz
	fstp	DWORD PTR [ecx+eax*4+4]

; 31   :             v[vidx+2] = z;

	mov	eax, DWORD PTR _vidx$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [ecx+eax*4+8]

; 32   :             vidx += 3;

	mov	eax, DWORD PTR _vidx$[ebp]
	add	eax, 3
	mov	DWORD PTR _vidx$[ebp], eax

; 33   :             tex[tidx] = j * texj;

	fild	DWORD PTR _j$17241[ebp]
	fmul	DWORD PTR _texj$[ebp]
	mov	eax, DWORD PTR _tidx$[ebp]
	mov	ecx, DWORD PTR _tex$[ebp]
	fstp	DWORD PTR [ecx+eax*4]

; 34   :             tex[tidx+1] = i * texi;

	fild	DWORD PTR _i$17237[ebp]
	fmul	DWORD PTR _texi$[ebp]
	mov	eax, DWORD PTR _tidx$[ebp]
	mov	ecx, DWORD PTR _tex$[ebp]
	fstp	DWORD PTR [ecx+eax*4+4]

; 35   :             tidx += 2;

	mov	eax, DWORD PTR _tidx$[ebp]
	add	eax, 2
	mov	DWORD PTR _tidx$[ebp], eax

; 36   :         }

	jmp	$LN8@VBOPlane
$LN7@VBOPlane:

; 37   :     }

	jmp	$LN11@VBOPlane
$LN10@VBOPlane:

; 38   : 
; 39   :     unsigned int rowStart, nextRowStart;
; 40   :     int idx = 0;

	mov	DWORD PTR _idx$[ebp], 0

; 41   :     for( int i = 0; i < zdivs; i++ ) {

	mov	DWORD PTR _i$17248[ebp], 0
	jmp	SHORT $LN6@VBOPlane
$LN5@VBOPlane:
	mov	eax, DWORD PTR _i$17248[ebp]
	add	eax, 1
	mov	DWORD PTR _i$17248[ebp], eax
$LN6@VBOPlane:
	mov	eax, DWORD PTR _i$17248[ebp]
	cmp	eax, DWORD PTR _zdivs$[ebp]
	jge	$LN4@VBOPlane

; 42   :         rowStart = i * (xdivs+1);

	mov	eax, DWORD PTR _xdivs$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _i$17248[ebp]
	mov	DWORD PTR _rowStart$[ebp], eax

; 43   :         nextRowStart = (i+1) * (xdivs+1);

	mov	eax, DWORD PTR _i$17248[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _xdivs$[ebp]
	add	ecx, 1
	imul	eax, ecx
	mov	DWORD PTR _nextRowStart$[ebp], eax

; 44   :         for( int j = 0; j < xdivs; j++ ) {

	mov	DWORD PTR _j$17252[ebp], 0
	jmp	SHORT $LN3@VBOPlane
$LN2@VBOPlane:
	mov	eax, DWORD PTR _j$17252[ebp]
	add	eax, 1
	mov	DWORD PTR _j$17252[ebp], eax
$LN3@VBOPlane:
	mov	eax, DWORD PTR _j$17252[ebp]
	cmp	eax, DWORD PTR _xdivs$[ebp]
	jge	$LN1@VBOPlane

; 45   :             el[idx] = rowStart + j;

	mov	eax, DWORD PTR _rowStart$[ebp]
	add	eax, DWORD PTR _j$17252[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _el$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 46   :             el[idx+1] = nextRowStart + j;

	mov	eax, DWORD PTR _nextRowStart$[ebp]
	add	eax, DWORD PTR _j$17252[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _el$[ebp]
	mov	DWORD PTR [edx+ecx*4+4], eax

; 47   :             el[idx+2] = nextRowStart + j + 1;

	mov	eax, DWORD PTR _j$17252[ebp]
	mov	ecx, DWORD PTR _nextRowStart$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _el$[ebp]
	mov	DWORD PTR [ecx+eax*4+8], edx

; 48   :             el[idx+3] = rowStart + j;

	mov	eax, DWORD PTR _rowStart$[ebp]
	add	eax, DWORD PTR _j$17252[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _el$[ebp]
	mov	DWORD PTR [edx+ecx*4+12], eax

; 49   :             el[idx+4] = nextRowStart + j + 1;

	mov	eax, DWORD PTR _j$17252[ebp]
	mov	ecx, DWORD PTR _nextRowStart$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _el$[ebp]
	mov	DWORD PTR [ecx+eax*4+16], edx

; 50   :             el[idx+5] = rowStart + j + 1;

	mov	eax, DWORD PTR _j$17252[ebp]
	mov	ecx, DWORD PTR _rowStart$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _el$[ebp]
	mov	DWORD PTR [ecx+eax*4+20], edx

; 51   :             idx += 6;

	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 6
	mov	DWORD PTR _idx$[ebp], eax

; 52   :         }

	jmp	$LN2@VBOPlane
$LN1@VBOPlane:

; 53   :     }

	jmp	$LN5@VBOPlane
$LN4@VBOPlane:

; 54   : 
; 55   :     unsigned int handle[3];
; 56   :     glGenBuffers(3, handle);

	mov	esi, esp
	lea	eax, DWORD PTR _handle$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR __imp____glewGenBuffers
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 57   : 
; 58   :     glBindBuffer(GL_ARRAY_BUFFER, handle[0]);

	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	push	34962					; 00008892H
	mov	ecx, DWORD PTR __imp____glewBindBuffer
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 59   :     glBufferData(GL_ARRAY_BUFFER, 3 * (xdivs+1) * (zdivs+1) * sizeof(float), v, GL_STATIC_DRAW);

	mov	esi, esp
	push	35044					; 000088e4H
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xdivs$[ebp]
	add	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _zdivs$[ebp]
	add	edx, 1
	imul	ecx, edx
	shl	ecx, 2
	push	ecx
	push	34962					; 00008892H
	mov	eax, DWORD PTR __imp____glewBufferData
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 60   :     glVertexAttribPointer( (GLuint)0, 3, GL_FLOAT, GL_FALSE, 0, ((GLubyte *)NULL + (0)) );

	mov	esi, esp
	push	0
	push	0
	push	0
	push	5126					; 00001406H
	push	3
	push	0
	mov	eax, DWORD PTR __imp____glewVertexAttribPointer
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 61   :     glEnableVertexAttribArray(0);  // Vertex position

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __imp____glewEnableVertexAttribArray
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 62   : 
; 63   :     glBindBuffer(GL_ARRAY_BUFFER, handle[1]);

	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp+4]
	push	eax
	push	34962					; 00008892H
	mov	ecx, DWORD PTR __imp____glewBindBuffer
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 64   :     glBufferData(GL_ARRAY_BUFFER, 2 * (xdivs+1) * (zdivs+1) * sizeof(float), tex, GL_STATIC_DRAW);

	mov	esi, esp
	push	35044					; 000088e4H
	mov	eax, DWORD PTR _tex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xdivs$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	eax, DWORD PTR _zdivs$[ebp]
	add	eax, 1
	imul	edx, eax
	shl	edx, 2
	push	edx
	push	34962					; 00008892H
	mov	ecx, DWORD PTR __imp____glewBufferData
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 65   :     glVertexAttribPointer( (GLuint)2, 2, GL_FLOAT, GL_FALSE, 0, ((GLubyte *)NULL + (0)) );

	mov	esi, esp
	push	0
	push	0
	push	0
	push	5126					; 00001406H
	push	2
	push	2
	mov	eax, DWORD PTR __imp____glewVertexAttribPointer
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 66   :     glEnableVertexAttribArray(2);  // Texture coords

	mov	esi, esp
	push	2
	mov	eax, DWORD PTR __imp____glewEnableVertexAttribArray
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 67   : 
; 68   :     glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, handle[2]);

	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp+8]
	push	eax
	push	34963					; 00008893H
	mov	ecx, DWORD PTR __imp____glewBindBuffer
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 69   :     glBufferData(GL_ELEMENT_ARRAY_BUFFER, 6 * xdivs * zdivs * sizeof(unsigned int), el, GL_STATIC_DRAW);

	mov	esi, esp
	push	35044					; 000088e4H
	mov	eax, DWORD PTR _el$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xdivs$[ebp]
	imul	ecx, 6
	imul	ecx, DWORD PTR _zdivs$[ebp]
	shl	ecx, 2
	push	ecx
	push	34963					; 00008893H
	mov	edx, DWORD PTR __imp____glewBufferData
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 70   : 
; 71   :     glBindVertexArray(0);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __imp____glewBindVertexArray
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 72   :     delete [] v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR $T17417[ebp], eax
	mov	ecx, DWORD PTR $T17417[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 73   :     delete [] tex;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR $T17418[ebp], eax
	mov	ecx, DWORD PTR $T17418[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 74   :     delete [] el;

	mov	eax, DWORD PTR _el$[ebp]
	mov	DWORD PTR $T17419[ebp], eax
	mov	ecx, DWORD PTR $T17419[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 75   : }

	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@VBOPlane
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 540				; 0000021cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN17@VBOPlane:
	DD	1
	DD	$LN16@VBOPlane
$LN16@VBOPlane:
	DD	-272					; fffffef0H
	DD	12					; 0000000cH
	DD	$LN15@VBOPlane
$LN15@VBOPlane:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??0VBOPlane@@QAE@MMHH@Z ENDP				; VBOPlane::VBOPlane
_TEXT	ENDS
PUBLIC	??_7Drawable@@6B@				; Drawable::`vftable'
PUBLIC	??_R4Drawable@@6B@				; Drawable::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4Drawable@@6B@
rdata$r	SEGMENT
??_R4Drawable@@6B@ DD 00H				; Drawable::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDrawable@@@8
	DD	FLAT:??_R3Drawable@@8
rdata$r	ENDS
;	COMDAT ??_7Drawable@@6B@
CONST	SEGMENT
??_7Drawable@@6B@ DD FLAT:??_R4Drawable@@6B@		; Drawable::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0Drawable@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Drawable@@QAE@XZ PROC				; Drawable::Drawable, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Drawable@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Drawable@@QAE@XZ ENDP				; Drawable::Drawable
_TEXT	ENDS
PUBLIC	__real@3f800000
EXTRN	__imp__glDrawElements@16:PROC
EXTRN	__imp____glewVertexAttrib3f:DWORD
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?render@VBOPlane@@UBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?render@VBOPlane@@UBEXXZ PROC				; VBOPlane::render, COMDAT
; _this$ = ecx

; 77   : void VBOPlane::render() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 78   :     glBindVertexArray(vaoHandle);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR __imp____glewBindVertexArray
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 79   :     glVertexAttrib3f(1, 0.0f, 1.0f, 0.0f);  // Constant normal for all verts

	mov	esi, esp
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	1
	mov	eax, DWORD PTR __imp____glewVertexAttrib3f
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 80   :     glDrawElements(GL_TRIANGLES, 6 * faces, GL_UNSIGNED_INT, ((GLubyte *)NULL + (0)));

	mov	esi, esp
	push	0
	push	5125					; 00001405H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 6
	push	ecx
	push	4
	call	DWORD PTR __imp__glDrawElements@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 81   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?render@VBOPlane@@UBEXXZ ENDP				; VBOPlane::render
_TEXT	ENDS
END
