; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\kmadsen\Google Drive\OpenGL_Projects\Starter\Starter\main.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?begin_time@@3JA				; begin_time
PUBLIC	?kScene@@3PAVKScene@@A				; kScene
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?main_window@@3HA				; main_window
PUBLIC	?position_x@@3HA				; position_x
PUBLIC	?position_y@@3HA				; position_y
PUBLIC	?width@@3HA					; width
PUBLIC	?height@@3HA					; height
_BSS	SEGMENT
?begin_time@@3JA DD 01H DUP (?)				; begin_time
?kScene@@3PAVKScene@@A DD 01H DUP (?)			; kScene
_BSS	ENDS
_DATA	SEGMENT
?main_window@@3HA DD 01H				; main_window
?position_x@@3HA DD 064H				; position_x
?position_y@@3HA DD 064H				; position_y
?width@@3HA DD	0300H					; width
?height@@3HA DD	0200H					; height
_DATA	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6?$AA@			; `string'
PUBLIC	??_C@_0BD@EGFKGFN@GLSL?5Version?5?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@HMJDLBEG@GL?5Version?5?5?5?3?5?$CFd?4?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0BD@BOAPOEKE@GL?5Version?5?5?5?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BD@ILCBPDKK@GL?5Renderer?5?5?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BD@JBBAPCFI@GL?5Vendor?5?5?5?5?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	?DumpGLInfo@@YAX_N@Z				; DumpGLInfo
EXTRN	__imp____glewGetStringi:DWORD
EXTRN	__imp__printf:PROC
EXTRN	__imp__glGetIntegerv@8:PROC
EXTRN	__imp__glGetString@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6?$AA@
; File c:\users\kmadsen\google drive\opengl_projects\starter\starter\main.cpp
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6?$AA@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EGFKGFN@GLSL?5Version?5?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BD@EGFKGFN@GLSL?5Version?5?3?5?$CFs?6?$AA@ DB 'GLSL Version : %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HMJDLBEG@GL?5Version?5?5?5?3?5?$CFd?4?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BG@HMJDLBEG@GL?5Version?5?5?5?3?5?$CFd?4?$CFd?6?$AA@ DB 'GL Versio'
	DB	'n   : %d.%d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BOAPOEKE@GL?5Version?5?5?5?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BD@BOAPOEKE@GL?5Version?5?5?5?3?5?$CFs?6?$AA@ DB 'GL Version   : %'
	DB	's', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ILCBPDKK@GL?5Renderer?5?5?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BD@ILCBPDKK@GL?5Renderer?5?5?3?5?$CFs?6?$AA@ DB 'GL Renderer  : %s'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JBBAPCFI@GL?5Vendor?5?5?5?5?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BD@JBBAPCFI@GL?5Vendor?5?5?5?5?3?5?$CFs?6?$AA@ DB 'GL Vendor    : '
	DB	'%s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?DumpGLInfo@@YAX_N@Z
_TEXT	SEGMENT
_i$88452 = -92						; size = 4
_nExtensions$88451 = -80				; size = 4
_minor$ = -68						; size = 4
_major$ = -56						; size = 4
_glslVersion$ = -44					; size = 4
_version$ = -32						; size = 4
_vendor$ = -20						; size = 4
_renderer$ = -8						; size = 4
_dumpExtensions$ = 8					; size = 1
?DumpGLInfo@@YAX_N@Z PROC				; DumpGLInfo, COMDAT

; 43   : void DumpGLInfo(bool dumpExtensions) {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 44   :     const GLubyte *renderer = glGetString( GL_RENDERER );

	mov	esi, esp
	push	7937					; 00001f01H
	call	DWORD PTR __imp__glGetString@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _renderer$[ebp], eax

; 45   :     const GLubyte *vendor = glGetString( GL_VENDOR );

	mov	esi, esp
	push	7936					; 00001f00H
	call	DWORD PTR __imp__glGetString@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _vendor$[ebp], eax

; 46   :     const GLubyte *version = glGetString( GL_VERSION );

	mov	esi, esp
	push	7938					; 00001f02H
	call	DWORD PTR __imp__glGetString@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _version$[ebp], eax

; 47   :     const GLubyte *glslVersion = glGetString( GL_SHADING_LANGUAGE_VERSION );

	mov	esi, esp
	push	35724					; 00008b8cH
	call	DWORD PTR __imp__glGetString@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _glslVersion$[ebp], eax

; 48   : 
; 49   :     GLint major, minor;
; 50   :     glGetIntegerv(GL_MAJOR_VERSION, &major);

	mov	esi, esp
	lea	eax, DWORD PTR _major$[ebp]
	push	eax
	push	33307					; 0000821bH
	call	DWORD PTR __imp__glGetIntegerv@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 51   :     glGetIntegerv(GL_MINOR_VERSION, &minor);

	mov	esi, esp
	lea	eax, DWORD PTR _minor$[ebp]
	push	eax
	push	33308					; 0000821cH
	call	DWORD PTR __imp__glGetIntegerv@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 52   : 
; 53   :     printf("GL Vendor    : %s\n", vendor);

	mov	esi, esp
	mov	eax, DWORD PTR _vendor$[ebp]
	push	eax
	push	OFFSET ??_C@_0BD@JBBAPCFI@GL?5Vendor?5?5?5?5?3?5?$CFs?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 54   :     printf("GL Renderer  : %s\n", renderer);

	mov	esi, esp
	mov	eax, DWORD PTR _renderer$[ebp]
	push	eax
	push	OFFSET ??_C@_0BD@ILCBPDKK@GL?5Renderer?5?5?3?5?$CFs?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 55   :     printf("GL Version   : %s\n", version);

	mov	esi, esp
	mov	eax, DWORD PTR _version$[ebp]
	push	eax
	push	OFFSET ??_C@_0BD@BOAPOEKE@GL?5Version?5?5?5?3?5?$CFs?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 56   :     printf("GL Version   : %d.%d\n", major, minor);

	mov	esi, esp
	mov	eax, DWORD PTR _minor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _major$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BG@HMJDLBEG@GL?5Version?5?5?5?3?5?$CFd?4?$CFd?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 57   :     printf("GLSL Version : %s\n", glslVersion);

	mov	esi, esp
	mov	eax, DWORD PTR _glslVersion$[ebp]
	push	eax
	push	OFFSET ??_C@_0BD@EGFKGFN@GLSL?5Version?5?3?5?$CFs?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 58   : 
; 59   :     if( dumpExtensions ) {

	movzx	eax, BYTE PTR _dumpExtensions$[ebp]
	test	eax, eax
	je	SHORT $LN5@DumpGLInfo

; 60   :         GLint nExtensions;
; 61   :         glGetIntegerv(GL_NUM_EXTENSIONS, &nExtensions);

	mov	esi, esp
	lea	eax, DWORD PTR _nExtensions$88451[ebp]
	push	eax
	push	33309					; 0000821dH
	call	DWORD PTR __imp__glGetIntegerv@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 62   :         for( int i = 0; i < nExtensions; i++ ) {

	mov	DWORD PTR _i$88452[ebp], 0
	jmp	SHORT $LN3@DumpGLInfo
$LN2@DumpGLInfo:
	mov	eax, DWORD PTR _i$88452[ebp]
	add	eax, 1
	mov	DWORD PTR _i$88452[ebp], eax
$LN3@DumpGLInfo:
	mov	eax, DWORD PTR _i$88452[ebp]
	cmp	eax, DWORD PTR _nExtensions$88451[ebp]
	jge	SHORT $LN5@DumpGLInfo

; 63   :             printf("%s\n", glGetStringi(GL_EXTENSIONS, i));

	mov	esi, esp
	mov	eax, DWORD PTR _i$88452[ebp]
	push	eax
	push	7939					; 00001f03H
	mov	ecx, DWORD PTR __imp____glewGetStringi
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 64   :         }

	jmp	SHORT $LN2@DumpGLInfo
$LN5@DumpGLInfo:

; 65   :     }
; 66   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@DumpGLInfo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@DumpGLInfo:
	DD	3
	DD	$LN10@DumpGLInfo
$LN10@DumpGLInfo:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN7@DumpGLInfo
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN8@DumpGLInfo
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN9@DumpGLInfo
$LN9@DumpGLInfo:
	DB	110					; 0000006eH
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN8@DumpGLInfo:
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN7@DumpGLInfo:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	106					; 0000006aH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?DumpGLInfo@@YAX_N@Z ENDP				; DumpGLInfo
_TEXT	ENDS
PUBLIC	?display@@YAXXZ					; display
EXTRN	__imp__glutSwapBuffers@0:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?display@@YAXXZ
_TEXT	SEGMENT
?display@@YAXXZ PROC					; display, COMDAT

; 68   : void display(void) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 69   : 
; 70   : 	kScene->Render();

	mov	eax, DWORD PTR ?kScene@@3PAVKScene@@A	; kScene
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR ?kScene@@3PAVKScene@@A	; kScene
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 71   : 
; 72   : 	glutSwapBuffers();

	mov	esi, esp
	call	DWORD PTR __imp__glutSwapBuffers@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 73   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?display@@YAXXZ ENDP					; display
_TEXT	ENDS
PUBLIC	?reshape@@YAXHH@Z				; reshape
EXTRN	__imp__glutPostRedisplay@0:PROC
EXTRN	__imp__glViewport@16:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reshape@@YAXHH@Z
_TEXT	SEGMENT
_w$ = 8							; size = 4
_h$ = 12						; size = 4
?reshape@@YAXHH@Z PROC					; reshape, COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 77   : 	glViewport(0,0,w,h);

	mov	esi, esp
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	push	0
	push	0
	call	DWORD PTR __imp__glViewport@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 78   : 
; 79   : 	kScene->Resize(w, h);

	mov	esi, esp
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?kScene@@3PAVKScene@@A	; kScene
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?kScene@@3PAVKScene@@A	; kScene
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 80   : 
; 81   : 	glutPostRedisplay();

	mov	esi, esp
	call	DWORD PTR __imp__glutPostRedisplay@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 82   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?reshape@@YAXHH@Z ENDP					; reshape
_TEXT	ENDS
PUBLIC	__real@408f400000000000
PUBLIC	__real@4024000000000000
PUBLIC	?idle@@YAXXZ					; idle
EXTRN	__imp__clock:PROC
EXTRN	__imp__glutSetWindow@4:PROC
EXTRN	__imp__glutGetWindow@0:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?idle@@YAXXZ
_TEXT	SEGMENT
tv89 = -220						; size = 4
_diffTime_ms$ = -20					; size = 4
_curTime$ = -8						; size = 4
?idle@@YAXXZ PROC					; idle, COMDAT

; 85   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 86   : 	if (glutGetWindow() != main_window)

	mov	esi, esp
	call	DWORD PTR __imp__glutGetWindow@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, DWORD PTR ?main_window@@3HA	; main_window
	je	SHORT $LN1@idle

; 87   : 		glutSetWindow(main_window);

	mov	esi, esp
	mov	eax, DWORD PTR ?main_window@@3HA	; main_window
	push	eax
	call	DWORD PTR __imp__glutSetWindow@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@idle:

; 88   : 
; 89   : 	clock_t curTime = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _curTime$[ebp], eax

; 90   : 	float diffTime_ms = (curTime - begin_time)*10.0f/CLOCKS_PER_SEC;

	mov	eax, DWORD PTR _curTime$[ebp]
	sub	eax, DWORD PTR ?begin_time@@3JA		; begin_time
	mov	DWORD PTR tv89[ebp], eax
	fild	DWORD PTR tv89[ebp]
	fmul	QWORD PTR __real@4024000000000000
	fdiv	QWORD PTR __real@408f400000000000
	fstp	DWORD PTR _diffTime_ms$[ebp]

; 91   : 	begin_time = curTime;

	mov	eax, DWORD PTR _curTime$[ebp]
	mov	DWORD PTR ?begin_time@@3JA, eax		; begin_time

; 92   : 
; 93   : 	kScene->Update(diffTime_ms);

	mov	esi, esp
	push	ecx
	fld	DWORD PTR _diffTime_ms$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR ?kScene@@3PAVKScene@@A	; kScene
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?kScene@@3PAVKScene@@A	; kScene
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 94   : 
; 95   : 	// just keep redrawing the scene over and over
; 96   : 	glutPostRedisplay();

	mov	esi, esp
	call	DWORD PTR __imp__glutPostRedisplay@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 97   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?idle@@YAXXZ ENDP					; idle
_TEXT	ENDS
PUBLIC	?keyboard@@YAXEHH@Z				; keyboard
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?keyboard@@YAXEHH@Z
_TEXT	SEGMENT
tv85 = -200						; size = 4
tv83 = -196						; size = 4
_key$ = 8						; size = 1
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?keyboard@@YAXEHH@Z PROC				; keyboard, COMDAT

; 100  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 101  : 	kScene->Keyboard(key, x/fWidth, y/fHeight);

	fild	DWORD PTR _y$[ebp]
	fdiv	DWORD PTR ?fHeight@@3MA			; fHeight
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	mov	esi, esp
	push	ecx
	fstp	DWORD PTR [esp]
	fild	DWORD PTR _x$[ebp]
	fdiv	DWORD PTR ?fWidth@@3MA			; fWidth
	fstp	DWORD PTR tv85[ebp]
	fld	DWORD PTR tv85[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	movzx	eax, BYTE PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?kScene@@3PAVKScene@@A	; kScene
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?kScene@@3PAVKScene@@A	; kScene
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 102  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?keyboard@@YAXEHH@Z ENDP				; keyboard
_TEXT	ENDS
PUBLIC	?SetPosition@KMouse@@QAEXMM@Z			; KMouse::SetPosition
PUBLIC	??0KMouse@@QAE@XZ				; KMouse::KMouse
PUBLIC	?mouse@@YAXHHHH@Z				; mouse
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?mouse@@YAXHHHH@Z
_TEXT	SEGMENT
tv91 = -224						; size = 4
tv89 = -220						; size = 4
_mouseState$ = -20					; size = 16
_mouse$ = 8						; size = 4
_state$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
?mouse@@YAXHHHH@Z PROC					; mouse, COMDAT

; 105  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 106  : 	KMouse mouseState;

	lea	ecx, DWORD PTR _mouseState$[ebp]
	call	??0KMouse@@QAE@XZ

; 107  : 	
; 108  : 	if (mouse == GLUT_LEFT_BUTTON)

	cmp	DWORD PTR _mouse$[ebp], 0
	jne	SHORT $LN8@mouse

; 109  : 		mouseState.Button = KMouse::LEFT;

	mov	DWORD PTR _mouseState$[ebp], 0
	jmp	SHORT $LN4@mouse
$LN8@mouse:

; 110  : 	else if (mouse == GLUT_RIGHT_BUTTON)

	cmp	DWORD PTR _mouse$[ebp], 2
	jne	SHORT $LN6@mouse

; 111  : 		mouseState.Button = KMouse::RIGHT;

	mov	DWORD PTR _mouseState$[ebp], 2
	jmp	SHORT $LN4@mouse
$LN6@mouse:

; 112  : 	else if (mouse == GLUT_MIDDLE_BUTTON)

	cmp	DWORD PTR _mouse$[ebp], 1
	jne	SHORT $LN4@mouse

; 113  : 		mouseState.Button = KMouse::MIDDLE;

	mov	DWORD PTR _mouseState$[ebp], 1
$LN4@mouse:

; 114  : 
; 115  : 	if (state == GLUT_DOWN)

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN3@mouse

; 116  : 		mouseState.State = KMouse::DOWN;

	mov	DWORD PTR _mouseState$[ebp+4], 0
	jmp	SHORT $LN1@mouse
$LN3@mouse:

; 117  : 	else if (state == GLUT_UP)

	cmp	DWORD PTR _state$[ebp], 1
	jne	SHORT $LN1@mouse

; 118  : 		mouseState.State = KMouse::UP;

	mov	DWORD PTR _mouseState$[ebp+4], 1
$LN1@mouse:

; 119  : 
; 120  : 	mouseState.SetPosition(x/fWidth, y/fHeight);

	fild	DWORD PTR _y$[ebp]
	fdiv	DWORD PTR ?fHeight@@3MA			; fHeight
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fild	DWORD PTR _x$[ebp]
	fdiv	DWORD PTR ?fWidth@@3MA			; fWidth
	fstp	DWORD PTR tv91[ebp]
	fld	DWORD PTR tv91[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _mouseState$[ebp]
	call	?SetPosition@KMouse@@QAEXMM@Z		; KMouse::SetPosition

; 121  : 
; 122  : 	kScene->Mouse(mouseState);

	mov	esi, esp
	lea	eax, DWORD PTR _mouseState$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?kScene@@3PAVKScene@@A	; kScene
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?kScene@@3PAVKScene@@A	; kScene
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 123  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@mouse
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@mouse:
	DD	1
	DD	$LN12@mouse
$LN12@mouse:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN11@mouse
$LN11@mouse:
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
?mouse@@YAXHHHH@Z ENDP					; mouse
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\kmadsen\google drive\opengl_projects\starter\starter\kscene.h
_TEXT	ENDS
;	COMDAT ?SetPosition@KMouse@@QAEXMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetPosition@KMouse@@QAEXMM@Z PROC			; KMouse::SetPosition, COMDAT
; _this$ = ecx

; 111  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		Position.x = x; Position.y = y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax+12]

; 113  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetPosition@KMouse@@QAEXMM@Z ENDP			; KMouse::SetPosition
_TEXT	ENDS
PUBLIC	??0?$tvec2@M@detail@glm@@QAE@XZ			; glm::detail::tvec2<float>::tvec2<float>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0KMouse@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0KMouse@@QAE@XZ PROC					; KMouse::KMouse, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$tvec2@M@detail@glm@@QAE@XZ		; glm::detail::tvec2<float>::tvec2<float>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0KMouse@@QAE@XZ ENDP					; KMouse::KMouse
_TEXT	ENDS
PUBLIC	?motion@@YAXHH@Z				; motion
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\kmadsen\google drive\opengl_projects\starter\starter\main.cpp
;	COMDAT ?motion@@YAXHH@Z
_TEXT	SEGMENT
tv83 = -200						; size = 4
tv81 = -196						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?motion@@YAXHH@Z PROC					; motion, COMDAT

; 126  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 127  : 	kScene->Motion(x/fWidth, y/fHeight);

	fild	DWORD PTR _y$[ebp]
	fdiv	DWORD PTR ?fHeight@@3MA			; fHeight
	fstp	DWORD PTR tv81[ebp]
	fld	DWORD PTR tv81[ebp]
	mov	esi, esp
	push	ecx
	fstp	DWORD PTR [esp]
	fild	DWORD PTR _x$[ebp]
	fdiv	DWORD PTR ?fWidth@@3MA			; fWidth
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR ?kScene@@3PAVKScene@@A	; kScene
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?kScene@@3PAVKScene@@A	; kScene
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 128  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?motion@@YAXHH@Z ENDP					; motion
_TEXT	ENDS
PUBLIC	??_C@_0BN@JABJMLIC@Error?5initializing?5GLEW?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	__real@3f800000
PUBLIC	??_C@_0N@PKACOLIC@Assignment?51?$AA@		; `string'
PUBLIC	_main
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp__glutMainLoop@0:PROC
EXTRN	??0AnimatingSurface@@QAE@XZ:PROC		; AnimatingSurface::AnimatingSurface
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp__fprintf:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	__imp__glewGetErrorString:PROC
EXTRN	__imp__glewInit:PROC
EXTRN	__imp__glutMotionFunc@4:PROC
EXTRN	__imp__glutMouseFunc@4:PROC
EXTRN	__imp__glutIdleFunc@4:PROC
EXTRN	__imp__glutReshapeFunc@4:PROC
EXTRN	__imp__glutKeyboardFunc@4:PROC
EXTRN	__imp__glutDisplayFunc@4:PROC
EXTRN	__imp__glPointSize@4:PROC
EXTRN	__imp__glutInitWindowPosition@8:PROC
EXTRN	__imp__glutInitWindowSize@8:PROC
EXTRN	__imp__glutInitDisplayMode@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0BN@JABJMLIC@Error?5initializing?5GLEW?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BN@JABJMLIC@Error?5initializing?5GLEW?3?5?$CFs?6?$AA@ DB 'Error in'
	DB	'itializing GLEW: %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_0N@PKACOLIC@Assignment?51?$AA@
CONST	SEGMENT
??_C@_0N@PKACOLIC@Assignment?51?$AA@ DB 'Assignment 1', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$_main DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_main$0
__ehfuncinfo$_main DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$_main
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT _main
_TEXT	SEGMENT
tv131 = -256						; size = 4
$T96092 = -248						; size = 4
$T96093 = -236						; size = 4
$T96096 = -224						; size = 4
_err$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC						; COMDAT

; 130  : int main(int argc, char **argv) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$_main
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 131  : 	glutInit(&argc, argv);

	mov	eax, DWORD PTR _argv$[ebp]
	push	eax
	lea	ecx, DWORD PTR _argc$[ebp]
	push	ecx
	call	_glutInit_ATEXIT_HACK@8

; 132  : 	
; 133  : 	glutInitDisplayMode(GLUT_RGBA);

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__glutInitDisplayMode@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 134  : 	glutInitWindowSize(width, height);

	mov	esi, esp
	mov	eax, DWORD PTR ?height@@3HA		; height
	push	eax
	mov	ecx, DWORD PTR ?width@@3HA		; width
	push	ecx
	call	DWORD PTR __imp__glutInitWindowSize@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 135  : 	glutInitWindowPosition(100,100);

	mov	esi, esp
	push	100					; 00000064H
	push	100					; 00000064H
	call	DWORD PTR __imp__glutInitWindowPosition@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 136  : 	main_window = glutCreateWindow("Assignment 1");

	push	OFFSET ??_C@_0N@PKACOLIC@Assignment?51?$AA@
	call	_glutCreateWindow_ATEXIT_HACK@4
	mov	DWORD PTR ?main_window@@3HA, eax	; main_window

; 137  : 	glPointSize(1);

	mov	esi, esp
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp__glPointSize@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 138  : 
; 139  : 	glutDisplayFunc(display);

	mov	esi, esp
	push	OFFSET ?display@@YAXXZ			; display
	call	DWORD PTR __imp__glutDisplayFunc@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 140  : 	glutKeyboardFunc(keyboard);

	mov	esi, esp
	push	OFFSET ?keyboard@@YAXEHH@Z		; keyboard
	call	DWORD PTR __imp__glutKeyboardFunc@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 141  : 	glutReshapeFunc(reshape);

	mov	esi, esp
	push	OFFSET ?reshape@@YAXHH@Z		; reshape
	call	DWORD PTR __imp__glutReshapeFunc@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 142  : 	glutIdleFunc(idle);

	mov	esi, esp
	push	OFFSET ?idle@@YAXXZ			; idle
	call	DWORD PTR __imp__glutIdleFunc@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 143  : 	glutMouseFunc(mouse);

	mov	esi, esp
	push	OFFSET ?mouse@@YAXHHHH@Z		; mouse
	call	DWORD PTR __imp__glutMouseFunc@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 144  : 	glutMotionFunc(motion);

	mov	esi, esp
	push	OFFSET ?motion@@YAXHH@Z			; motion
	call	DWORD PTR __imp__glutMotionFunc@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 145  : 
; 146  : 	GLenum err = glewInit();

	mov	esi, esp
	call	DWORD PTR __imp__glewInit
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], eax

; 147  : 	if (GLEW_OK != err) {

	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN1@main

; 148  : 		fprintf(stderr, "Error initializing GLEW: %s\n", glewGetErrorString(err));

	mov	esi, esp
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	call	DWORD PTR __imp__glewGetErrorString
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_0BN@JABJMLIC@Error?5initializing?5GLEW?3?5?$CFs?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@main:

; 149  : 	}
; 150  : 
; 151  : 	//DumpGLInfo(true);
; 152  : 
; 153  : 	kScene = new AnimatingSurface();

	push	168					; 000000a8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T96093[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T96093[ebp], 0
	je	SHORT $LN4@main
	mov	ecx, DWORD PTR $T96093[ebp]
	call	??0AnimatingSurface@@QAE@XZ		; AnimatingSurface::AnimatingSurface
	mov	DWORD PTR tv131[ebp], eax
	jmp	SHORT $LN5@main
$LN4@main:
	mov	DWORD PTR tv131[ebp], 0
$LN5@main:
	mov	eax, DWORD PTR tv131[ebp]
	mov	DWORD PTR $T96092[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T96092[ebp]
	mov	DWORD PTR ?kScene@@3PAVKScene@@A, ecx	; kScene

; 154  : 
; 155  : 	kScene->Init();

	mov	eax, DWORD PTR ?kScene@@3PAVKScene@@A	; kScene
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR ?kScene@@3PAVKScene@@A	; kScene
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 156  : 
; 157  : 	begin_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?begin_time@@3JA, eax		; begin_time

; 158  : 	glutMainLoop();

	mov	esi, esp
	call	DWORD PTR __imp__glutMainLoop@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 159  : 
; 160  : 	delete kScene;

	mov	eax, DWORD PTR ?kScene@@3PAVKScene@@A	; kScene
	mov	DWORD PTR $T96096[ebp], eax
	mov	ecx, DWORD PTR $T96096[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 161  : }

	xor	eax, eax
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_main$0:
	mov	eax, DWORD PTR $T96093[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$_main:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$_main
	jmp	___CxxFrameHandler3
text$x	ENDS
_main	ENDP
EXTRN	__imp____glutInitWithExit@12:PROC
EXTRN	__imp__exit:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\gl\freeglut_std.h
;	COMDAT _glutInit_ATEXIT_HACK@8
_TEXT	SEGMENT
_argcp$ = 8						; size = 4
_argv$ = 12						; size = 4
_glutInit_ATEXIT_HACK@8 PROC				; COMDAT

; 606  : static void FGAPIENTRY FGUNUSED glutInit_ATEXIT_HACK(int *argcp, char **argv) { __glutInitWithExit(argcp, argv, exit); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	esi, esp
	mov	eax, DWORD PTR __imp__exit
	push	eax
	mov	ecx, DWORD PTR _argv$[ebp]
	push	ecx
	mov	edx, DWORD PTR _argcp$[ebp]
	push	edx
	call	DWORD PTR __imp____glutInitWithExit@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_glutInit_ATEXIT_HACK@8 ENDP
_TEXT	ENDS
EXTRN	__imp____glutCreateWindowWithExit@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _glutCreateWindow_ATEXIT_HACK@4
_TEXT	SEGMENT
_title$ = 8						; size = 4
_glutCreateWindow_ATEXIT_HACK@4 PROC			; COMDAT

; 608  : static int FGAPIENTRY FGUNUSED glutCreateWindow_ATEXIT_HACK(const char *title) { return __glutCreateWindowWithExit(title, exit); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	esi, esp
	mov	eax, DWORD PTR __imp__exit
	push	eax
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	call	DWORD PTR __imp____glutCreateWindowWithExit@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_glutCreateWindow_ATEXIT_HACK@4 ENDP
_TEXT	ENDS
PUBLIC	__real@00000000
;	COMDAT __real@00000000
; File c:\opengl\glm-0.9.3.1\glm\core\type_vec2.inl
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0?$tvec2@M@detail@glm@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$tvec2@M@detail@glm@@QAE@XZ PROC			; glm::detail::tvec2<float>::tvec2<float>, COMDAT
; _this$ = ecx

; 70   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tvec2@M@detail@glm@@QAE@XZ ENDP			; glm::detail::tvec2<float>::tvec2<float>
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\kmadsen\google drive\opengl_projects\starter\starter\main.cpp
_TEXT	ENDS
;	COMDAT ??__EfWidth@@YAXXZ
text$yc	SEGMENT
??__EfWidth@@YAXXZ PROC					; `dynamic initializer for 'fWidth'', COMDAT

; 38   : float fWidth = static_cast<float>(width);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fild	DWORD PTR ?width@@3HA			; width
	fstp	DWORD PTR ?fWidth@@3MA			; fWidth
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__EfWidth@@YAXXZ ENDP					; `dynamic initializer for 'fWidth''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__EfHeight@@YAXXZ
text$yc	SEGMENT
??__EfHeight@@YAXXZ PROC				; `dynamic initializer for 'fHeight'', COMDAT

; 39   : float fHeight = static_cast<float>(height);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fild	DWORD PTR ?height@@3HA			; height
	fstp	DWORD PTR ?fHeight@@3MA			; fHeight
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__EfHeight@@YAXXZ ENDP				; `dynamic initializer for 'fHeight''
text$yc	ENDS
PUBLIC	?fWidth@@3MA					; fWidth
PUBLIC	?fHeight@@3MA					; fHeight
_BSS	SEGMENT
?fWidth@@3MA DD	01H DUP (?)				; fWidth
?fHeight@@3MA DD 01H DUP (?)				; fHeight
_BSS	ENDS
CRT$XCU	SEGMENT
_fWidth$initializer$ DD FLAT:??__EfWidth@@YAXXZ
_fHeight$initializer$ DD FLAT:??__EfHeight@@YAXXZ
CRT$XCU	ENDS
END
