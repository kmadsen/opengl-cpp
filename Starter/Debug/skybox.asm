; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\kmadsen\Google Drive\OpenGL_Projects\Starter\Starter\skybox.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__real@4000000000000000
PUBLIC	__real@42480000
PUBLIC	??_7SkyBox@@6B@					; SkyBox::`vftable'
PUBLIC	??0Drawable@@QAE@XZ				; Drawable::Drawable
PUBLIC	__$ArrayPad$
PUBLIC	??0SkyBox@@QAE@XZ				; SkyBox::SkyBox
PUBLIC	??_R4SkyBox@@6B@				; SkyBox::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSkyBox@@@8				; SkyBox `RTTI Type Descriptor'
PUBLIC	??_R3SkyBox@@8					; SkyBox::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SkyBox@@8					; SkyBox::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SkyBox@@8				; SkyBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@Drawable@@8			; Drawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVDrawable@@@8				; Drawable `RTTI Type Descriptor'
PUBLIC	??_R3Drawable@@8				; Drawable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Drawable@@8				; Drawable::`RTTI Base Class Array'
PUBLIC	?render@SkyBox@@UBEXXZ				; SkyBox::render
EXTRN	__imp____glewEnableVertexAttribArray:DWORD
EXTRN	__imp____glewVertexAttribPointer:DWORD
EXTRN	__imp____glewBindVertexArray:DWORD
EXTRN	__imp____glewGenVertexArrays:DWORD
EXTRN	__imp____glewBufferData:DWORD
EXTRN	__imp____glewBindBuffer:DWORD
EXTRN	__imp____glewGenBuffers:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R2Drawable@@8
; File c:\users\kmadsen\google drive\opengl_projects\starter\starter\skybox.cpp
rdata$r	SEGMENT
??_R2Drawable@@8 DD FLAT:??_R1A@?0A@EA@Drawable@@8	; Drawable::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Drawable@@8
rdata$r	SEGMENT
??_R3Drawable@@8 DD 00H					; Drawable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Drawable@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDrawable@@@8
_DATA	SEGMENT
??_R0?AVDrawable@@@8 DD FLAT:??_7type_info@@6B@		; Drawable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDrawable@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@Drawable@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Drawable@@8 DD FLAT:??_R0?AVDrawable@@@8	; Drawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Drawable@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SkyBox@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SkyBox@@8 DD FLAT:??_R0?AVSkyBox@@@8	; SkyBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SkyBox@@8
rdata$r	ENDS
;	COMDAT ??_R2SkyBox@@8
rdata$r	SEGMENT
??_R2SkyBox@@8 DD FLAT:??_R1A@?0A@EA@SkyBox@@8		; SkyBox::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Drawable@@8
rdata$r	ENDS
;	COMDAT ??_R3SkyBox@@8
rdata$r	SEGMENT
??_R3SkyBox@@8 DD 00H					; SkyBox::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SkyBox@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSkyBox@@@8
_DATA	SEGMENT
??_R0?AVSkyBox@@@8 DD FLAT:??_7type_info@@6B@		; SkyBox `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSkyBox@@', 00H
_DATA	ENDS
;	COMDAT ??_R4SkyBox@@6B@
rdata$r	SEGMENT
??_R4SkyBox@@6B@ DD 00H					; SkyBox::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSkyBox@@@8
	DD	FLAT:??_R3SkyBox@@8
rdata$r	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT ??_7SkyBox@@6B@
CONST	SEGMENT
??_7SkyBox@@6B@ DD FLAT:??_R4SkyBox@@6B@		; SkyBox::`vftable'
	DD	FLAT:?render@SkyBox@@UBEXXZ
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0SkyBox@@QAE@XZ
_TEXT	SEGMENT
_handle$ = -500						; size = 8
_el$ = -484						; size = 144
_v$ = -332						; size = 288
_side2$ = -36						; size = 4
_side$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
??0SkyBox@@QAE@XZ PROC					; SkyBox::SkyBox, COMDAT
; _this$ = ecx

; 9    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 696				; 000002b8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-696]
	mov	ecx, 174				; 000000aeH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Drawable@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7SkyBox@@6B@

; 10   :     float side = 50.0f;

	fld	DWORD PTR __real@42480000
	fstp	DWORD PTR _side$[ebp]

; 11   :     float side2 = side / 2.0f;

	fld	DWORD PTR _side$[ebp]
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR _side2$[ebp]

; 12   :     float v[24*3] = {
; 13   :         // Front
; 14   :        -side2, -side2, side2,

	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+4]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+8]

; 15   :         side2, -side2, side2,

	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+12]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+16]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+20]

; 16   :         side2,  side2, side2,

	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+24]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+28]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+32]

; 17   :        -side2,  side2, side2,

	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+36]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+40]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+44]

; 18   :        // Right
; 19   :         side2, -side2, side2,

	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+48]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+52]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+56]

; 20   :         side2, -side2, -side2,

	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+60]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+64]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+68]

; 21   :         side2,  side2, -side2,

	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+72]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+76]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+80]

; 22   :         side2,  side2, side2,

	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+84]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+88]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+92]

; 23   :        // Back
; 24   :        -side2, -side2, -side2,

	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+96]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+100]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+104]

; 25   :        -side2,  side2, -side2,

	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+108]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+112]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+116]

; 26   :         side2,  side2, -side2,

	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+120]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+124]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+128]

; 27   :         side2, -side2, -side2,

	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+132]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+136]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+140]

; 28   :        // Left
; 29   :        -side2, -side2, side2,

	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+144]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+148]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+152]

; 30   :         side2,  side2, side2,

	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+156]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+160]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+164]

; 31   :        -side2,  side2, -side2,

	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+168]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+172]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+176]

; 32   :        -side2, -side2, -side2,

	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+180]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+184]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+188]

; 33   :        // Bottom
; 34   :        -side2, -side2, side2,

	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+192]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+196]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+200]

; 35   :        -side2, -side2, -side2,

	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+204]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+208]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+212]

; 36   :         side2, -side2, -side2,

	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+216]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+220]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+224]

; 37   :         side2, -side2, side2,

	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+228]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+232]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+236]

; 38   :        // Top
; 39   :        -side2,  side2, side2,

	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+240]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+244]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+248]

; 40   :         side2,  side2, side2,

	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+252]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+256]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+260]

; 41   :         side2,  side2, -side2,

	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+264]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+268]
	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+272]

; 42   :        -side2,  side2, -side2

	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+276]
	fld	DWORD PTR _side2$[ebp]
	fstp	DWORD PTR _v$[ebp+280]

; 43   :     };

	fld	DWORD PTR _side2$[ebp]
	fchs
	fstp	DWORD PTR _v$[ebp+284]

; 44   : 
; 45   :     GLuint el[] = {
; 46   :         0,2,1,0,3,2,

	mov	DWORD PTR _el$[ebp], 0
	mov	DWORD PTR _el$[ebp+4], 2
	mov	DWORD PTR _el$[ebp+8], 1
	mov	DWORD PTR _el$[ebp+12], 0
	mov	DWORD PTR _el$[ebp+16], 3
	mov	DWORD PTR _el$[ebp+20], 2

; 47   :         4,6,5,4,7,6,

	mov	DWORD PTR _el$[ebp+24], 4
	mov	DWORD PTR _el$[ebp+28], 6
	mov	DWORD PTR _el$[ebp+32], 5
	mov	DWORD PTR _el$[ebp+36], 4
	mov	DWORD PTR _el$[ebp+40], 7
	mov	DWORD PTR _el$[ebp+44], 6

; 48   :         8,10,9,8,11,10,

	mov	DWORD PTR _el$[ebp+48], 8
	mov	DWORD PTR _el$[ebp+52], 10		; 0000000aH
	mov	DWORD PTR _el$[ebp+56], 9
	mov	DWORD PTR _el$[ebp+60], 8
	mov	DWORD PTR _el$[ebp+64], 11		; 0000000bH
	mov	DWORD PTR _el$[ebp+68], 10		; 0000000aH

; 49   :         12,14,13,12,15,14,

	mov	DWORD PTR _el$[ebp+72], 12		; 0000000cH
	mov	DWORD PTR _el$[ebp+76], 14		; 0000000eH
	mov	DWORD PTR _el$[ebp+80], 13		; 0000000dH
	mov	DWORD PTR _el$[ebp+84], 12		; 0000000cH
	mov	DWORD PTR _el$[ebp+88], 15		; 0000000fH
	mov	DWORD PTR _el$[ebp+92], 14		; 0000000eH

; 50   :         16,18,17,16,19,18,

	mov	DWORD PTR _el$[ebp+96], 16		; 00000010H
	mov	DWORD PTR _el$[ebp+100], 18		; 00000012H
	mov	DWORD PTR _el$[ebp+104], 17		; 00000011H
	mov	DWORD PTR _el$[ebp+108], 16		; 00000010H
	mov	DWORD PTR _el$[ebp+112], 19		; 00000013H
	mov	DWORD PTR _el$[ebp+116], 18		; 00000012H

; 51   :         20,22,21,20,23,22

	mov	DWORD PTR _el$[ebp+120], 20		; 00000014H
	mov	DWORD PTR _el$[ebp+124], 22		; 00000016H
	mov	DWORD PTR _el$[ebp+128], 21		; 00000015H
	mov	DWORD PTR _el$[ebp+132], 20		; 00000014H
	mov	DWORD PTR _el$[ebp+136], 23		; 00000017H

; 52   :     };

	mov	DWORD PTR _el$[ebp+140], 22		; 00000016H

; 53   : 
; 54   :     unsigned int handle[2];
; 55   :     glGenBuffers(2, handle);

	mov	esi, esp
	lea	eax, DWORD PTR _handle$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR __imp____glewGenBuffers
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 56   : 
; 57   :     glBindBuffer(GL_ARRAY_BUFFER, handle[0]);

	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	push	34962					; 00008892H
	mov	ecx, DWORD PTR __imp____glewBindBuffer
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 58   :     glBufferData(GL_ARRAY_BUFFER, 24 * 3 * sizeof(float), v, GL_STATIC_DRAW);

	mov	esi, esp
	push	35044					; 000088e4H
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	push	288					; 00000120H
	push	34962					; 00008892H
	mov	ecx, DWORD PTR __imp____glewBufferData
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 59   : 
; 60   :     glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, handle[1]);

	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp+4]
	push	eax
	push	34963					; 00008893H
	mov	ecx, DWORD PTR __imp____glewBindBuffer
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 61   :     glBufferData(GL_ELEMENT_ARRAY_BUFFER, 36 * sizeof(GLuint), el, GL_STATIC_DRAW);

	mov	esi, esp
	push	35044					; 000088e4H
	lea	eax, DWORD PTR _el$[ebp]
	push	eax
	push	144					; 00000090H
	push	34963					; 00008893H
	mov	ecx, DWORD PTR __imp____glewBufferData
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 62   : 
; 63   :     glGenVertexArrays( 1, &vaoHandle );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esi, esp
	push	eax
	push	1
	mov	ecx, DWORD PTR __imp____glewGenVertexArrays
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 64   :     glBindVertexArray(vaoHandle);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR __imp____glewBindVertexArray
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 65   : 
; 66   :     glVertexAttribPointer( (GLuint)0, 3, GL_FLOAT, GL_FALSE, 0, ((GLubyte *)NULL + (0)) );

	mov	esi, esp
	push	0
	push	0
	push	0
	push	5126					; 00001406H
	push	3
	push	0
	mov	eax, DWORD PTR __imp____glewVertexAttribPointer
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 67   :     glEnableVertexAttribArray(0);  // Vertex position

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __imp____glewEnableVertexAttribArray
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 68   : 
; 69   :     glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, handle[1]);

	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp+4]
	push	eax
	push	34963					; 00008893H
	mov	ecx, DWORD PTR __imp____glewBindBuffer
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 70   : 
; 71   :     glBindVertexArray(0);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __imp____glewBindVertexArray
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 72   : }

	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@SkyBox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 696				; 000002b8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@SkyBox:
	DD	3
	DD	$LN6@SkyBox
$LN6@SkyBox:
	DD	-332					; fffffeb4H
	DD	288					; 00000120H
	DD	$LN3@SkyBox
	DD	-484					; fffffe1cH
	DD	144					; 00000090H
	DD	$LN4@SkyBox
	DD	-500					; fffffe0cH
	DD	8
	DD	$LN5@SkyBox
$LN5@SkyBox:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN4@SkyBox:
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN3@SkyBox:
	DB	118					; 00000076H
	DB	0
??0SkyBox@@QAE@XZ ENDP					; SkyBox::SkyBox
_TEXT	ENDS
PUBLIC	??_7Drawable@@6B@				; Drawable::`vftable'
PUBLIC	??_R4Drawable@@6B@				; Drawable::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4Drawable@@6B@
rdata$r	SEGMENT
??_R4Drawable@@6B@ DD 00H				; Drawable::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDrawable@@@8
	DD	FLAT:??_R3Drawable@@8
rdata$r	ENDS
;	COMDAT ??_7Drawable@@6B@
CONST	SEGMENT
??_7Drawable@@6B@ DD FLAT:??_R4Drawable@@6B@		; Drawable::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0Drawable@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Drawable@@QAE@XZ PROC				; Drawable::Drawable, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Drawable@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Drawable@@QAE@XZ ENDP				; Drawable::Drawable
_TEXT	ENDS
EXTRN	__imp__glDrawElements@16:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?render@SkyBox@@UBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?render@SkyBox@@UBEXXZ PROC				; SkyBox::render, COMDAT
; _this$ = ecx

; 75   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 76   :     glBindVertexArray(vaoHandle);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR __imp____glewBindVertexArray
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 77   :     glDrawElements(GL_TRIANGLES, 36, GL_UNSIGNED_INT, ((GLubyte *)NULL + (0)));

	mov	esi, esp
	push	0
	push	5125					; 00001405H
	push	36					; 00000024H
	push	4
	call	DWORD PTR __imp__glDrawElements@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 78   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?render@SkyBox@@UBEXXZ ENDP				; SkyBox::render
_TEXT	ENDS
END
