; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\kmadsen\Google Drive\OpenGL_Projects\Starter\Starter\vboteapot.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_patchdata DD	066H
	DD	067H
	DD	068H
	DD	069H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	09H
	DD	0aH
	DD	0bH
	DD	0cH
	DD	0dH
	DD	0eH
	DD	0fH
	DD	0cH
	DD	0dH
	DD	0eH
	DD	0fH
	DD	010H
	DD	011H
	DD	012H
	DD	013H
	DD	014H
	DD	015H
	DD	016H
	DD	017H
	DD	018H
	DD	019H
	DD	01aH
	DD	01bH
	DD	018H
	DD	019H
	DD	01aH
	DD	01bH
	DD	01dH
	DD	01eH
	DD	01fH
	DD	020H
	DD	021H
	DD	022H
	DD	023H
	DD	024H
	DD	025H
	DD	026H
	DD	027H
	DD	028H
	DD	060H
	DD	060H
	DD	060H
	DD	060H
	DD	061H
	DD	062H
	DD	063H
	DD	064H
	DD	065H
	DD	065H
	DD	065H
	DD	065H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	06aH
	DD	06bH
	DD	06cH
	DD	06dH
	DD	06eH
	DD	06fH
	DD	070H
	DD	071H
	DD	072H
	DD	073H
	DD	074H
	DD	075H
	DD	076H
	DD	076H
	DD	076H
	DD	076H
	DD	07cH
	DD	07aH
	DD	077H
	DD	079H
	DD	07bH
	DD	07eH
	DD	07dH
	DD	078H
	DD	028H
	DD	027H
	DD	026H
	DD	025H
	DD	029H
	DD	02aH
	DD	02bH
	DD	02cH
	DD	02dH
	DD	02eH
	DD	02fH
	DD	030H
	DD	031H
	DD	032H
	DD	033H
	DD	034H
	DD	035H
	DD	036H
	DD	037H
	DD	038H
	DD	035H
	DD	036H
	DD	037H
	DD	038H
	DD	039H
	DD	03aH
	DD	03bH
	DD	03cH
	DD	03dH
	DD	03eH
	DD	03fH
	DD	040H
	DD	01cH
	DD	041H
	DD	042H
	DD	043H
	DD	044H
	DD	045H
	DD	046H
	DD	047H
	DD	048H
	DD	049H
	DD	04aH
	DD	04bH
	DD	04cH
	DD	04dH
	DD	04eH
	DD	04fH
	DD	050H
	DD	051H
	DD	052H
	DD	053H
	DD	050H
	DD	051H
	DD	052H
	DD	053H
	DD	054H
	DD	055H
	DD	056H
	DD	057H
	DD	058H
	DD	059H
	DD	05aH
	DD	05bH
	DD	05cH
	DD	05dH
	DD	05eH
	DD	05fH
_cpdata	DD	03e4ccccdr			; 0.2
	DD	000000000r			; 0
	DD	0402ccccdr			; 2.7
	DD	03e4ccccdr			; 0.2
	DD	0bde56042r			; -0.112
	DD	0402ccccdr			; 2.7
	DD	03de56042r			; 0.112
	DD	0be4ccccdr			; -0.2
	DD	0402ccccdr			; 2.7
	DD	000000000r			; 0
	DD	0be4ccccdr			; -0.2
	DD	0402ccccdr			; 2.7
	DD	03fab3333r			; 1.3375
	DD	000000000r			; 0
	DD	040220000r			; 2.53125
	DD	03fab3333r			; 1.3375
	DD	0bf3fbe77r			; -0.749
	DD	040220000r			; 2.53125
	DD	03f3fbe77r			; 0.749
	DD	0bfab3333r			; -1.3375
	DD	040220000r			; 2.53125
	DD	000000000r			; 0
	DD	0bfab3333r			; -1.3375
	DD	040220000r			; 2.53125
	DD	03fb80000r			; 1.4375
	DD	000000000r			; 0
	DD	040220000r			; 2.53125
	DD	03fb80000r			; 1.4375
	DD	0bf4e147br			; -0.805
	DD	040220000r			; 2.53125
	DD	03f4e147br			; 0.805
	DD	0bfb80000r			; -1.4375
	DD	040220000r			; 2.53125
	DD	000000000r			; 0
	DD	0bfb80000r			; -1.4375
	DD	040220000r			; 2.53125
	DD	03fc00000r			; 1.5
	DD	000000000r			; 0
	DD	04019999ar			; 2.4
	DD	03fc00000r			; 1.5
	DD	0bf570a3dr			; -0.84
	DD	04019999ar			; 2.4
	DD	03f570a3dr			; 0.84
	DD	0bfc00000r			; -1.5
	DD	04019999ar			; 2.4
	DD	000000000r			; 0
	DD	0bfc00000r			; -1.5
	DD	04019999ar			; 2.4
	DD	03fe00000r			; 1.75
	DD	000000000r			; 0
	DD	03ff00000r			; 1.875
	DD	03fe00000r			; 1.75
	DD	0bf7ae148r			; -0.98
	DD	03ff00000r			; 1.875
	DD	03f7ae148r			; 0.98
	DD	0bfe00000r			; -1.75
	DD	03ff00000r			; 1.875
	DD	000000000r			; 0
	DD	0bfe00000r			; -1.75
	DD	03ff00000r			; 1.875
	DD	040000000r			; 2
	DD	000000000r			; 0
	DD	03faccccdr			; 1.35
	DD	040000000r			; 2
	DD	0bf8f5c29r			; -1.12
	DD	03faccccdr			; 1.35
	DD	03f8f5c29r			; 1.12
	DD	0c0000000r			; -2
	DD	03faccccdr			; 1.35
	DD	000000000r			; 0
	DD	0c0000000r			; -2
	DD	03faccccdr			; 1.35
	DD	040000000r			; 2
	DD	000000000r			; 0
	DD	03f666666r			; 0.9
	DD	040000000r			; 2
	DD	0bf8f5c29r			; -1.12
	DD	03f666666r			; 0.9
	DD	03f8f5c29r			; 1.12
	DD	0c0000000r			; -2
	DD	03f666666r			; 0.9
	DD	000000000r			; 0
	DD	0c0000000r			; -2
	DD	03f666666r			; 0.9
	DD	0c0000000r			; -2
	DD	000000000r			; 0
	DD	03f666666r			; 0.9
	DD	040000000r			; 2
	DD	000000000r			; 0
	DD	03ee66666r			; 0.45
	DD	040000000r			; 2
	DD	0bf8f5c29r			; -1.12
	DD	03ee66666r			; 0.45
	DD	03f8f5c29r			; 1.12
	DD	0c0000000r			; -2
	DD	03ee66666r			; 0.45
	DD	000000000r			; 0
	DD	0c0000000r			; -2
	DD	03ee66666r			; 0.45
	DD	03fc00000r			; 1.5
	DD	000000000r			; 0
	DD	03e666666r			; 0.225
	DD	03fc00000r			; 1.5
	DD	0bf570a3dr			; -0.84
	DD	03e666666r			; 0.225
	DD	03f570a3dr			; 0.84
	DD	0bfc00000r			; -1.5
	DD	03e666666r			; 0.225
	DD	000000000r			; 0
	DD	0bfc00000r			; -1.5
	DD	03e666666r			; 0.225
	DD	03fc00000r			; 1.5
	DD	000000000r			; 0
	DD	03e19999ar			; 0.15
	DD	03fc00000r			; 1.5
	DD	0bf570a3dr			; -0.84
	DD	03e19999ar			; 0.15
	DD	03f570a3dr			; 0.84
	DD	0bfc00000r			; -1.5
	DD	03e19999ar			; 0.15
	DD	000000000r			; 0
	DD	0bfc00000r			; -1.5
	DD	03e19999ar			; 0.15
	DD	0bfcccccdr			; -1.6
	DD	000000000r			; 0
	DD	04001999ar			; 2.025
	DD	0bfcccccdr			; -1.6
	DD	0be99999ar			; -0.3
	DD	04001999ar			; 2.025
	DD	0bfc00000r			; -1.5
	DD	0be99999ar			; -0.3
	DD	040100000r			; 2.25
	DD	0bfc00000r			; -1.5
	DD	000000000r			; 0
	DD	040100000r			; 2.25
	DD	0c0133333r			; -2.3
	DD	000000000r			; 0
	DD	04001999ar			; 2.025
	DD	0c0133333r			; -2.3
	DD	0be99999ar			; -0.3
	DD	04001999ar			; 2.025
	DD	0c0200000r			; -2.5
	DD	0be99999ar			; -0.3
	DD	040100000r			; 2.25
	DD	0c0200000r			; -2.5
	DD	000000000r			; 0
	DD	040100000r			; 2.25
	DD	0c02ccccdr			; -2.7
	DD	000000000r			; 0
	DD	04001999ar			; 2.025
	DD	0c02ccccdr			; -2.7
	DD	0be99999ar			; -0.3
	DD	04001999ar			; 2.025
	DD	0c0400000r			; -3
	DD	0be99999ar			; -0.3
	DD	040100000r			; 2.25
	DD	0c0400000r			; -3
	DD	000000000r			; 0
	DD	040100000r			; 2.25
	DD	0c02ccccdr			; -2.7
	DD	000000000r			; 0
	DD	03fe66666r			; 1.8
	DD	0c02ccccdr			; -2.7
	DD	0be99999ar			; -0.3
	DD	03fe66666r			; 1.8
	DD	0c0400000r			; -3
	DD	0be99999ar			; -0.3
	DD	03fe66666r			; 1.8
	DD	0c0400000r			; -3
	DD	000000000r			; 0
	DD	03fe66666r			; 1.8
	DD	0c02ccccdr			; -2.7
	DD	000000000r			; 0
	DD	03fc9999ar			; 1.575
	DD	0c02ccccdr			; -2.7
	DD	0be99999ar			; -0.3
	DD	03fc9999ar			; 1.575
	DD	0c0400000r			; -3
	DD	0be99999ar			; -0.3
	DD	03faccccdr			; 1.35
	DD	0c0400000r			; -3
	DD	000000000r			; 0
	DD	03faccccdr			; 1.35
	DD	0c0200000r			; -2.5
	DD	000000000r			; 0
	DD	03f900000r			; 1.125
	DD	0c0200000r			; -2.5
	DD	0be99999ar			; -0.3
	DD	03f900000r			; 1.125
	DD	0c029999ar			; -2.65
	DD	0be99999ar			; -0.3
	DD	03f700000r			; 0.9375
	DD	0c029999ar			; -2.65
	DD	000000000r			; 0
	DD	03f700000r			; 0.9375
	DD	0c0000000r			; -2
	DD	0be99999ar			; -0.3
	DD	03f666666r			; 0.9
	DD	0bff33333r			; -1.9
	DD	0be99999ar			; -0.3
	DD	03f19999ar			; 0.6
	DD	0bff33333r			; -1.9
	DD	000000000r			; 0
	DD	03f19999ar			; 0.6
	DD	03fd9999ar			; 1.7
	DD	000000000r			; 0
	DD	03fb66666r			; 1.425
	DD	03fd9999ar			; 1.7
	DD	0bf28f5c3r			; -0.66
	DD	03fb66666r			; 1.425
	DD	03fd9999ar			; 1.7
	DD	0bf28f5c3r			; -0.66
	DD	03f19999ar			; 0.6
	DD	03fd9999ar			; 1.7
	DD	000000000r			; 0
	DD	03f19999ar			; 0.6
	DD	040266666r			; 2.6
	DD	000000000r			; 0
	DD	03fb66666r			; 1.425
	DD	040266666r			; 2.6
	DD	0bf28f5c3r			; -0.66
	DD	03fb66666r			; 1.425
	DD	040466666r			; 3.1
	DD	0bf28f5c3r			; -0.66
	DD	03f533333r			; 0.825
	DD	040466666r			; 3.1
	DD	000000000r			; 0
	DD	03f533333r			; 0.825
	DD	040133333r			; 2.3
	DD	000000000r			; 0
	DD	040066666r			; 2.1
	DD	040133333r			; 2.3
	DD	0be800000r			; -0.25
	DD	040066666r			; 2.1
	DD	04019999ar			; 2.4
	DD	0be800000r			; -0.25
	DD	04001999ar			; 2.025
	DD	04019999ar			; 2.4
	DD	000000000r			; 0
	DD	04001999ar			; 2.025
	DD	0402ccccdr			; 2.7
	DD	000000000r			; 0
	DD	04019999ar			; 2.4
	DD	0402ccccdr			; 2.7
	DD	0be800000r			; -0.25
	DD	04019999ar			; 2.4
	DD	040533333r			; 3.3
	DD	0be800000r			; -0.25
	DD	04019999ar			; 2.4
	DD	040533333r			; 3.3
	DD	000000000r			; 0
	DD	04019999ar			; 2.4
	DD	040333333r			; 2.8
	DD	000000000r			; 0
	DD	0401e6666r			; 2.475
	DD	040333333r			; 2.8
	DD	0be800000r			; -0.25
	DD	0401e6666r			; 2.475
	DD	04061999ar			; 3.525
	DD	0be800000r			; -0.25
	DD	0401f999ar			; 2.49375
	DD	04061999ar			; 3.525
	DD	000000000r			; 0
	DD	0401f999ar			; 2.49375
	DD	04039999ar			; 2.9
	DD	000000000r			; 0
	DD	0401e6666r			; 2.475
	DD	04039999ar			; 2.9
	DD	0be19999ar			; -0.15
	DD	0401e6666r			; 2.475
	DD	0405ccccdr			; 3.45
	DD	0be19999ar			; -0.15
	DD	04020cccdr			; 2.5125
	DD	0405ccccdr			; 3.45
	DD	000000000r			; 0
	DD	04020cccdr			; 2.5125
	DD	040333333r			; 2.8
	DD	000000000r			; 0
	DD	04019999ar			; 2.4
	DD	040333333r			; 2.8
	DD	0be19999ar			; -0.15
	DD	04019999ar			; 2.4
	DD	0404ccccdr			; 3.2
	DD	0be19999ar			; -0.15
	DD	04019999ar			; 2.4
	DD	0404ccccdr			; 3.2
	DD	000000000r			; 0
	DD	04019999ar			; 2.4
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	04049999ar			; 3.15
	DD	03f4ccccdr			; 0.8
	DD	000000000r			; 0
	DD	04049999ar			; 3.15
	DD	03f4ccccdr			; 0.8
	DD	0bee66666r			; -0.45
	DD	04049999ar			; 3.15
	DD	03ee66666r			; 0.45
	DD	0bf4ccccdr			; -0.8
	DD	04049999ar			; 3.15
	DD	000000000r			; 0
	DD	0bf4ccccdr			; -0.8
	DD	04049999ar			; 3.15
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	040366666r			; 2.85
	DD	03fb33333r			; 1.4
	DD	000000000r			; 0
	DD	04019999ar			; 2.4
	DD	03fb33333r			; 1.4
	DD	0bf48b439r			; -0.784
	DD	04019999ar			; 2.4
	DD	03f48b439r			; 0.784
	DD	0bfb33333r			; -1.4
	DD	04019999ar			; 2.4
	DD	000000000r			; 0
	DD	0bfb33333r			; -1.4
	DD	04019999ar			; 2.4
	DD	03ecccccdr			; 0.4
	DD	000000000r			; 0
	DD	040233333r			; 2.55
	DD	03ecccccdr			; 0.4
	DD	0be656042r			; -0.224
	DD	040233333r			; 2.55
	DD	03e656042r			; 0.224
	DD	0becccccdr			; -0.4
	DD	040233333r			; 2.55
	DD	000000000r			; 0
	DD	0becccccdr			; -0.4
	DD	040233333r			; 2.55
	DD	03fa66666r			; 1.3
	DD	000000000r			; 0
	DD	040233333r			; 2.55
	DD	03fa66666r			; 1.3
	DD	0bf3a5e35r			; -0.728
	DD	040233333r			; 2.55
	DD	03f3a5e35r			; 0.728
	DD	0bfa66666r			; -1.3
	DD	040233333r			; 2.55
	DD	000000000r			; 0
	DD	0bfa66666r			; -1.3
	DD	040233333r			; 2.55
	DD	03fa66666r			; 1.3
	DD	000000000r			; 0
	DD	04019999ar			; 2.4
	DD	03fa66666r			; 1.3
	DD	0bf3a5e35r			; -0.728
	DD	04019999ar			; 2.4
	DD	03f3a5e35r			; 0.728
	DD	0bfa66666r			; -1.3
	DD	04019999ar			; 2.4
	DD	000000000r			; 0
	DD	0bfa66666r			; -1.3
	DD	04019999ar			; 2.4
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03fb66666r			; 1.425
	DD	0bf4c49bar			; -0.798
	DD	000000000r			; 0
	DD	03fc00000r			; 1.5
	DD	000000000r			; 0
	DD	03d99999ar			; 0.075
	DD	03fb66666r			; 1.425
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f4c49bar			; 0.798
	DD	0bfb66666r			; -1.425
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0bfc00000r			; -1.5
	DD	03d99999ar			; 0.075
	DD	000000000r			; 0
	DD	0bfb66666r			; -1.425
	DD	000000000r			; 0
	DD	03fc00000r			; 1.5
	DD	0bf570a3dr			; -0.84
	DD	03d99999ar			; 0.075
	DD	03f570a3dr			; 0.84
	DD	0bfc00000r			; -1.5
	DD	03d99999ar			; 0.075
_tex	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
_DATA	ENDS
PUBLIC	?moveLid@VBOTeapot@@AAEXHPAMU?$tmat4x4@M@detail@glm@@@Z ; VBOTeapot::moveLid
PUBLIC	??0?$tmat4x4@M@detail@glm@@QAE@ABU012@@Z	; glm::detail::tmat4x4<float>::tmat4x4<float>
PUBLIC	?generatePatches@VBOTeapot@@AAEXPAM00PAIH@Z	; VBOTeapot::generatePatches
PUBLIC	??_7VBOTeapot@@6B@				; VBOTeapot::`vftable'
PUBLIC	??0Drawable@@QAE@XZ				; Drawable::Drawable
PUBLIC	__$ArrayPad$
PUBLIC	??0VBOTeapot@@QAE@HU?$tmat4x4@M@detail@glm@@@Z	; VBOTeapot::VBOTeapot
PUBLIC	??_R4VBOTeapot@@6B@				; VBOTeapot::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVVBOTeapot@@@8				; VBOTeapot `RTTI Type Descriptor'
PUBLIC	??_R3VBOTeapot@@8				; VBOTeapot::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VBOTeapot@@8				; VBOTeapot::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VBOTeapot@@8			; VBOTeapot::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@Drawable@@8			; Drawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVDrawable@@@8				; Drawable `RTTI Type Descriptor'
PUBLIC	??_R3Drawable@@8				; Drawable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Drawable@@8				; Drawable::`RTTI Base Class Array'
PUBLIC	?render@VBOTeapot@@UBEXXZ			; VBOTeapot::render
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp____glewEnableVertexAttribArray:DWORD
EXTRN	__imp____glewVertexAttribPointer:DWORD
EXTRN	__imp____glewBufferData:DWORD
EXTRN	__imp____glewBindBuffer:DWORD
EXTRN	__imp____glewGenBuffers:DWORD
EXTRN	__imp____glewBindVertexArray:DWORD
EXTRN	__imp____glewGenVertexArrays:DWORD
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R2Drawable@@8
; File c:\users\kmadsen\google drive\opengl_projects\starter\starter\vboteapot.cpp
rdata$r	SEGMENT
??_R2Drawable@@8 DD FLAT:??_R1A@?0A@EA@Drawable@@8	; Drawable::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Drawable@@8
rdata$r	SEGMENT
??_R3Drawable@@8 DD 00H					; Drawable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Drawable@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDrawable@@@8
_DATA	SEGMENT
??_R0?AVDrawable@@@8 DD FLAT:??_7type_info@@6B@		; Drawable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDrawable@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@Drawable@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Drawable@@8 DD FLAT:??_R0?AVDrawable@@@8	; Drawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Drawable@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@VBOTeapot@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VBOTeapot@@8 DD FLAT:??_R0?AVVBOTeapot@@@8 ; VBOTeapot::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VBOTeapot@@8
rdata$r	ENDS
;	COMDAT ??_R2VBOTeapot@@8
rdata$r	SEGMENT
??_R2VBOTeapot@@8 DD FLAT:??_R1A@?0A@EA@VBOTeapot@@8	; VBOTeapot::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Drawable@@8
rdata$r	ENDS
;	COMDAT ??_R3VBOTeapot@@8
rdata$r	SEGMENT
??_R3VBOTeapot@@8 DD 00H				; VBOTeapot::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2VBOTeapot@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVBOTeapot@@@8
_DATA	SEGMENT
??_R0?AVVBOTeapot@@@8 DD FLAT:??_7type_info@@6B@	; VBOTeapot `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVBOTeapot@@', 00H
_DATA	ENDS
;	COMDAT ??_R4VBOTeapot@@6B@
rdata$r	SEGMENT
??_R4VBOTeapot@@6B@ DD 00H				; VBOTeapot::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVVBOTeapot@@@8
	DD	FLAT:??_R3VBOTeapot@@8
rdata$r	ENDS
;	COMDAT ??_7VBOTeapot@@6B@
CONST	SEGMENT
??_7VBOTeapot@@6B@ DD FLAT:??_R4VBOTeapot@@6B@		; VBOTeapot::`vftable'
	DD	FLAT:?render@VBOTeapot@@UBEXXZ
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0VBOTeapot@@QAE@HU?$tmat4x4@M@detail@glm@@@Z
_TEXT	SEGMENT
$T42301 = -396						; size = 4
$T42302 = -384						; size = 4
$T42303 = -372						; size = 4
$T42304 = -360						; size = 4
$T42306 = -336						; size = 4
$T42307 = -324						; size = 4
$T42308 = -312						; size = 4
$T42309 = -300						; size = 4
_handle$ = -96						; size = 16
_el$ = -72						; size = 4
_tc$ = -60						; size = 4
_n$ = -48						; size = 4
_v$ = -36						; size = 4
_verts$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_grid$ = 8						; size = 4
_lidTransform$ = 12					; size = 64
??0VBOTeapot@@QAE@HU?$tmat4x4@M@detail@glm@@@Z PROC	; VBOTeapot::VBOTeapot, COMDAT
; _this$ = ecx

; 18   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 400				; 00000190H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-400]
	mov	ecx, 100				; 00000064H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Drawable@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7VBOTeapot@@6B@

; 19   :     int verts = 32 * (grid + 1) * (grid + 1);

	mov	eax, DWORD PTR _grid$[ebp]
	add	eax, 1
	shl	eax, 5
	mov	ecx, DWORD PTR _grid$[ebp]
	add	ecx, 1
	imul	eax, ecx
	mov	DWORD PTR _verts$[ebp], eax

; 20   :     faces = grid * grid * 32;

	mov	eax, DWORD PTR _grid$[ebp]
	imul	eax, DWORD PTR _grid$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 21   :     float * v = new float[ verts * 3 ];

	mov	eax, DWORD PTR _verts$[ebp]
	imul	eax, 3
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T42301[ebp], eax
	mov	eax, DWORD PTR $T42301[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 22   :     float * n = new float[ verts * 3 ];

	mov	eax, DWORD PTR _verts$[ebp]
	imul	eax, 3
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T42302[ebp], eax
	mov	eax, DWORD PTR $T42302[ebp]
	mov	DWORD PTR _n$[ebp], eax

; 23   :     float * tc = new float[ verts * 2 ];

	mov	eax, DWORD PTR _verts$[ebp]
	shl	eax, 1
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T42303[ebp], eax
	mov	eax, DWORD PTR $T42303[ebp]
	mov	DWORD PTR _tc$[ebp], eax

; 24   :     unsigned int * el = new unsigned int[faces * 6];

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	imul	eax, 6
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T42304[ebp], eax
	mov	eax, DWORD PTR $T42304[ebp]
	mov	DWORD PTR _el$[ebp], eax

; 25   : 
; 26   :     glGenVertexArrays( 1, &vaoHandle );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esi, esp
	push	eax
	push	1
	mov	ecx, DWORD PTR __imp____glewGenVertexArrays
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 27   :     glBindVertexArray(vaoHandle);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR __imp____glewBindVertexArray
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 28   : 
; 29   :     unsigned int handle[4];
; 30   :     glGenBuffers(4, handle);

	mov	esi, esp
	lea	eax, DWORD PTR _handle$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR __imp____glewGenBuffers
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 31   : 
; 32   :     generatePatches( v, n, tc, el, grid );

	mov	eax, DWORD PTR _grid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _el$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tc$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?generatePatches@VBOTeapot@@AAEXPAM00PAIH@Z ; VBOTeapot::generatePatches

; 33   :     moveLid(grid, v, lidTransform);

	sub	esp, 64					; 00000040H
	mov	ecx, esp
	lea	eax, DWORD PTR _lidTransform$[ebp]
	push	eax
	call	??0?$tmat4x4@M@detail@glm@@QAE@ABU012@@Z ; glm::detail::tmat4x4<float>::tmat4x4<float>
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _grid$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?moveLid@VBOTeapot@@AAEXHPAMU?$tmat4x4@M@detail@glm@@@Z ; VBOTeapot::moveLid

; 34   : 
; 35   :     glBindBuffer(GL_ARRAY_BUFFER, handle[0]);

	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	push	34962					; 00008892H
	mov	ecx, DWORD PTR __imp____glewBindBuffer
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 36   :     glBufferData(GL_ARRAY_BUFFER, (3 * verts) * sizeof(float), v, GL_STATIC_DRAW);

	mov	esi, esp
	push	35044					; 000088e4H
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _verts$[ebp]
	imul	ecx, 3
	shl	ecx, 2
	push	ecx
	push	34962					; 00008892H
	mov	edx, DWORD PTR __imp____glewBufferData
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 37   :     glVertexAttribPointer( (GLuint)0, 3, GL_FLOAT, GL_FALSE, 0, ((GLubyte *)NULL + (0)) );

	mov	esi, esp
	push	0
	push	0
	push	0
	push	5126					; 00001406H
	push	3
	push	0
	mov	eax, DWORD PTR __imp____glewVertexAttribPointer
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 38   :     glEnableVertexAttribArray(0);  // Vertex position

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __imp____glewEnableVertexAttribArray
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 39   : 
; 40   :     glBindBuffer(GL_ARRAY_BUFFER, handle[1]);

	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp+4]
	push	eax
	push	34962					; 00008892H
	mov	ecx, DWORD PTR __imp____glewBindBuffer
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 41   :     glBufferData(GL_ARRAY_BUFFER, (3 * verts) * sizeof(float), n, GL_STATIC_DRAW);

	mov	esi, esp
	push	35044					; 000088e4H
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _verts$[ebp]
	imul	ecx, 3
	shl	ecx, 2
	push	ecx
	push	34962					; 00008892H
	mov	edx, DWORD PTR __imp____glewBufferData
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 42   :     glVertexAttribPointer( (GLuint)1, 3, GL_FLOAT, GL_FALSE, 0, ((GLubyte *)NULL + (0)) );

	mov	esi, esp
	push	0
	push	0
	push	0
	push	5126					; 00001406H
	push	3
	push	1
	mov	eax, DWORD PTR __imp____glewVertexAttribPointer
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 43   :     glEnableVertexAttribArray(1);  // Vertex normal

	mov	esi, esp
	push	1
	mov	eax, DWORD PTR __imp____glewEnableVertexAttribArray
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 44   : 
; 45   :     glBindBuffer(GL_ARRAY_BUFFER, handle[2]);

	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp+8]
	push	eax
	push	34962					; 00008892H
	mov	ecx, DWORD PTR __imp____glewBindBuffer
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 46   :     glBufferData(GL_ARRAY_BUFFER, (2 * verts) * sizeof(float), tc, GL_STATIC_DRAW);

	mov	esi, esp
	push	35044					; 000088e4H
	mov	eax, DWORD PTR _tc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _verts$[ebp]
	shl	ecx, 1
	shl	ecx, 2
	push	ecx
	push	34962					; 00008892H
	mov	edx, DWORD PTR __imp____glewBufferData
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 47   :     glVertexAttribPointer( (GLuint)2, 2, GL_FLOAT, GL_FALSE, 0, ((GLubyte *)NULL + (0)) );

	mov	esi, esp
	push	0
	push	0
	push	0
	push	5126					; 00001406H
	push	2
	push	2
	mov	eax, DWORD PTR __imp____glewVertexAttribPointer
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 48   :     glEnableVertexAttribArray(2);  // texture coords

	mov	esi, esp
	push	2
	mov	eax, DWORD PTR __imp____glewEnableVertexAttribArray
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 49   : 
; 50   :     glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, handle[3]);

	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp+12]
	push	eax
	push	34963					; 00008893H
	mov	ecx, DWORD PTR __imp____glewBindBuffer
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 51   :     glBufferData(GL_ELEMENT_ARRAY_BUFFER, 6 * faces * sizeof(unsigned int), el, GL_STATIC_DRAW);

	mov	esi, esp
	push	35044					; 000088e4H
	mov	eax, DWORD PTR _el$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	imul	edx, 6
	shl	edx, 2
	push	edx
	push	34963					; 00008893H
	mov	eax, DWORD PTR __imp____glewBufferData
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 52   : 
; 53   :     delete [] v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR $T42306[ebp], eax
	mov	ecx, DWORD PTR $T42306[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 54   :     delete [] n;

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T42307[ebp], eax
	mov	ecx, DWORD PTR $T42307[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 55   :     delete [] el;

	mov	eax, DWORD PTR _el$[ebp]
	mov	DWORD PTR $T42308[ebp], eax
	mov	ecx, DWORD PTR $T42308[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 56   :     delete [] tc;

	mov	eax, DWORD PTR _tc$[ebp]
	mov	DWORD PTR $T42309[ebp], eax
	mov	ecx, DWORD PTR $T42309[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 57   : 
; 58   :     glBindVertexArray(0);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __imp____glewBindVertexArray
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 59   : }

	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@VBOTeapot
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 400				; 00000190H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	68					; 00000044H
	npad	2
$LN5@VBOTeapot:
	DD	1
	DD	$LN4@VBOTeapot
$LN4@VBOTeapot:
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN3@VBOTeapot
$LN3@VBOTeapot:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??0VBOTeapot@@QAE@HU?$tmat4x4@M@detail@glm@@@Z ENDP	; VBOTeapot::VBOTeapot
_TEXT	ENDS
PUBLIC	??_7Drawable@@6B@				; Drawable::`vftable'
PUBLIC	??_R4Drawable@@6B@				; Drawable::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4Drawable@@6B@
rdata$r	SEGMENT
??_R4Drawable@@6B@ DD 00H				; Drawable::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDrawable@@@8
	DD	FLAT:??_R3Drawable@@8
rdata$r	ENDS
;	COMDAT ??_7Drawable@@6B@
CONST	SEGMENT
??_7Drawable@@6B@ DD FLAT:??_R4Drawable@@6B@		; Drawable::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0Drawable@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Drawable@@QAE@XZ PROC				; Drawable::Drawable, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Drawable@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Drawable@@QAE@XZ ENDP				; Drawable::Drawable
_TEXT	ENDS
PUBLIC	?buildPatchReflect@VBOTeapot@@AAEXHPAM0000PAIAAH22H_N3@Z ; VBOTeapot::buildPatchReflect
PUBLIC	?computeBasisFunctions@VBOTeapot@@AAEXPAM0H@Z	; VBOTeapot::computeBasisFunctions
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?generatePatches@VBOTeapot@@AAEXPAM00PAIH@Z
_TEXT	SEGMENT
$T42329 = -308						; size = 4
$T42330 = -296						; size = 4
$T42331 = -284						; size = 4
$T42332 = -272						; size = 4
_tcIndex$ = -68						; size = 4
_elIndex$ = -56						; size = 4
_idx$ = -44						; size = 4
_dB$ = -32						; size = 4
_B$ = -20						; size = 4
_this$ = -8						; size = 4
_v$ = 8							; size = 4
_n$ = 12						; size = 4
_tc$ = 16						; size = 4
_el$ = 20						; size = 4
_grid$ = 24						; size = 4
?generatePatches@VBOTeapot@@AAEXPAM00PAIH@Z PROC	; VBOTeapot::generatePatches, COMDAT
; _this$ = ecx

; 61   : void VBOTeapot::generatePatches(float * v, float * n, float * tc, unsigned int* el, int grid) {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   :     float * B = new float[4*(grid+1)];  // Pre-computed Bernstein basis functions

	mov	eax, DWORD PTR _grid$[ebp]
	lea	eax, DWORD PTR [eax*4+4]
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T42329[ebp], eax
	mov	eax, DWORD PTR $T42329[ebp]
	mov	DWORD PTR _B$[ebp], eax

; 63   :     float * dB = new float[4*(grid+1)]; // Pre-computed derivitives of basis functions

	mov	eax, DWORD PTR _grid$[ebp]
	lea	eax, DWORD PTR [eax*4+4]
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T42330[ebp], eax
	mov	eax, DWORD PTR $T42330[ebp]
	mov	DWORD PTR _dB$[ebp], eax

; 64   : 
; 65   :     int idx = 0, elIndex = 0, tcIndex = 0;

	mov	DWORD PTR _idx$[ebp], 0
	mov	DWORD PTR _elIndex$[ebp], 0
	mov	DWORD PTR _tcIndex$[ebp], 0

; 66   : 
; 67   :     // Pre-compute the basis functions  (Bernstein polynomials)
; 68   :     // and their derivatives
; 69   :     computeBasisFunctions(B, dB, grid);

	mov	eax, DWORD PTR _grid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dB$[ebp]
	push	ecx
	mov	edx, DWORD PTR _B$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?computeBasisFunctions@VBOTeapot@@AAEXPAM0H@Z ; VBOTeapot::computeBasisFunctions

; 70   : 
; 71   :     // Build each patch
; 72   :     // The rim
; 73   :     buildPatchReflect(0, B, dB, v, n, tc, el, idx, elIndex, tcIndex, grid, true, true);

	push	1
	push	1
	mov	eax, DWORD PTR _grid$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tcIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _elIndex$[ebp]
	push	edx
	lea	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _el$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tc$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dB$[ebp]
	push	edx
	mov	eax, DWORD PTR _B$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?buildPatchReflect@VBOTeapot@@AAEXHPAM0000PAIAAH22H_N3@Z ; VBOTeapot::buildPatchReflect

; 74   :     // The body
; 75   :     buildPatchReflect(1, B, dB, v, n, tc, el, idx, elIndex, tcIndex, grid, true, true);

	push	1
	push	1
	mov	eax, DWORD PTR _grid$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tcIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _elIndex$[ebp]
	push	edx
	lea	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _el$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tc$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dB$[ebp]
	push	edx
	mov	eax, DWORD PTR _B$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?buildPatchReflect@VBOTeapot@@AAEXHPAM0000PAIAAH22H_N3@Z ; VBOTeapot::buildPatchReflect

; 76   :     buildPatchReflect(2, B, dB, v, n, tc, el, idx, elIndex, tcIndex, grid, true, true);

	push	1
	push	1
	mov	eax, DWORD PTR _grid$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tcIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _elIndex$[ebp]
	push	edx
	lea	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _el$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tc$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dB$[ebp]
	push	edx
	mov	eax, DWORD PTR _B$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?buildPatchReflect@VBOTeapot@@AAEXHPAM0000PAIAAH22H_N3@Z ; VBOTeapot::buildPatchReflect

; 77   :     // The lid
; 78   :     buildPatchReflect(3, B, dB, v, n, tc, el, idx, elIndex, tcIndex, grid, true, true);

	push	1
	push	1
	mov	eax, DWORD PTR _grid$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tcIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _elIndex$[ebp]
	push	edx
	lea	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _el$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tc$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dB$[ebp]
	push	edx
	mov	eax, DWORD PTR _B$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?buildPatchReflect@VBOTeapot@@AAEXHPAM0000PAIAAH22H_N3@Z ; VBOTeapot::buildPatchReflect

; 79   :     buildPatchReflect(4, B, dB, v, n, tc, el, idx, elIndex, tcIndex, grid, true, true);

	push	1
	push	1
	mov	eax, DWORD PTR _grid$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tcIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _elIndex$[ebp]
	push	edx
	lea	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _el$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tc$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dB$[ebp]
	push	edx
	mov	eax, DWORD PTR _B$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?buildPatchReflect@VBOTeapot@@AAEXHPAM0000PAIAAH22H_N3@Z ; VBOTeapot::buildPatchReflect

; 80   :     // The bottom
; 81   :     buildPatchReflect(5, B, dB, v, n, tc, el, idx, elIndex, tcIndex, grid, true, true);

	push	1
	push	1
	mov	eax, DWORD PTR _grid$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tcIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _elIndex$[ebp]
	push	edx
	lea	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _el$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tc$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dB$[ebp]
	push	edx
	mov	eax, DWORD PTR _B$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?buildPatchReflect@VBOTeapot@@AAEXHPAM0000PAIAAH22H_N3@Z ; VBOTeapot::buildPatchReflect

; 82   :     // The handle
; 83   :     buildPatchReflect(6, B, dB, v, n, tc, el, idx, elIndex, tcIndex, grid, false, true);

	push	1
	push	0
	mov	eax, DWORD PTR _grid$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tcIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _elIndex$[ebp]
	push	edx
	lea	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _el$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tc$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dB$[ebp]
	push	edx
	mov	eax, DWORD PTR _B$[ebp]
	push	eax
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?buildPatchReflect@VBOTeapot@@AAEXHPAM0000PAIAAH22H_N3@Z ; VBOTeapot::buildPatchReflect

; 84   :     buildPatchReflect(7, B, dB, v, n, tc, el, idx, elIndex, tcIndex, grid, false, true);

	push	1
	push	0
	mov	eax, DWORD PTR _grid$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tcIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _elIndex$[ebp]
	push	edx
	lea	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _el$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tc$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dB$[ebp]
	push	edx
	mov	eax, DWORD PTR _B$[ebp]
	push	eax
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?buildPatchReflect@VBOTeapot@@AAEXHPAM0000PAIAAH22H_N3@Z ; VBOTeapot::buildPatchReflect

; 85   :     // The spout
; 86   :     buildPatchReflect(8, B, dB, v, n, tc, el, idx, elIndex, tcIndex, grid, false, true);

	push	1
	push	0
	mov	eax, DWORD PTR _grid$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tcIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _elIndex$[ebp]
	push	edx
	lea	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _el$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tc$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dB$[ebp]
	push	edx
	mov	eax, DWORD PTR _B$[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?buildPatchReflect@VBOTeapot@@AAEXHPAM0000PAIAAH22H_N3@Z ; VBOTeapot::buildPatchReflect

; 87   :     buildPatchReflect(9, B, dB, v, n, tc, el, idx, elIndex, tcIndex, grid, false, true);

	push	1
	push	0
	mov	eax, DWORD PTR _grid$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tcIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _elIndex$[ebp]
	push	edx
	lea	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _el$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tc$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dB$[ebp]
	push	edx
	mov	eax, DWORD PTR _B$[ebp]
	push	eax
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?buildPatchReflect@VBOTeapot@@AAEXHPAM0000PAIAAH22H_N3@Z ; VBOTeapot::buildPatchReflect

; 88   : 
; 89   :     delete [] B;

	mov	eax, DWORD PTR _B$[ebp]
	mov	DWORD PTR $T42331[ebp], eax
	mov	ecx, DWORD PTR $T42331[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 90   :     delete [] dB;

	mov	eax, DWORD PTR _dB$[ebp]
	mov	DWORD PTR $T42332[ebp], eax
	mov	ecx, DWORD PTR $T42332[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 91   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@generatePa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN7@generatePa:
	DD	3
	DD	$LN6@generatePa
$LN6@generatePa:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN3@generatePa
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN4@generatePa
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN5@generatePa
$LN5@generatePa:
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN4@generatePa:
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN3@generatePa:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
?generatePatches@VBOTeapot@@AAEXPAM00PAIH@Z ENDP	; VBOTeapot::generatePatches
_TEXT	ENDS
PUBLIC	??4?$tvec4@M@detail@glm@@QAEAAU012@ABU012@@Z	; glm::detail::tvec4<float>::operator=
PUBLIC	??$?DM@detail@glm@@YA?AU?$tvec4@M@01@ABU?$tmat4x4@M@01@ABU201@@Z ; glm::detail::operator*<float>
PUBLIC	??0?$tvec4@M@detail@glm@@QAE@ABM000@Z		; glm::detail::tvec4<float>::tvec4<float>
PUBLIC	__real@3f800000
EXTRN	__fltused:DWORD
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?moveLid@VBOTeapot@@AAEXHPAMU?$tmat4x4@M@detail@glm@@@Z
_TEXT	SEGMENT
$T42341 = -308						; size = 4
$T42342 = -296						; size = 16
_vert$40038 = -68					; size = 16
_i$40034 = -44						; size = 4
_end$ = -32						; size = 4
_start$ = -20						; size = 4
_this$ = -8						; size = 4
_grid$ = 8						; size = 4
_v$ = 12						; size = 4
_lidTransform$ = 16					; size = 64
?moveLid@VBOTeapot@@AAEXHPAMU?$tmat4x4@M@detail@glm@@@Z PROC ; VBOTeapot::moveLid, COMDAT
; _this$ = ecx

; 93   : void VBOTeapot::moveLid(int grid, float *v, mat4 lidTransform) {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 94   : 
; 95   :     int start = 3 * 12 * (grid+1) * (grid+1);

	mov	eax, DWORD PTR _grid$[ebp]
	add	eax, 1
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _grid$[ebp]
	add	ecx, 1
	imul	eax, ecx
	mov	DWORD PTR _start$[ebp], eax

; 96   :     int end = 3 * 20 * (grid+1) * (grid+1);

	mov	eax, DWORD PTR _grid$[ebp]
	add	eax, 1
	imul	eax, 60					; 0000003cH
	mov	ecx, DWORD PTR _grid$[ebp]
	add	ecx, 1
	imul	eax, ecx
	mov	DWORD PTR _end$[ebp], eax

; 97   : 
; 98   :     for( int i = start; i < end; i+=3 )

	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$40034[ebp], eax
	jmp	SHORT $LN3@moveLid
$LN2@moveLid:
	mov	eax, DWORD PTR _i$40034[ebp]
	add	eax, 3
	mov	DWORD PTR _i$40034[ebp], eax
$LN3@moveLid:
	mov	eax, DWORD PTR _i$40034[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jge	$LN1@moveLid

; 99   :     {
; 100  :         vec4 vert = vec4(v[i], v[i+1], v[i+2], 1.0f );

	fld1
	fstp	DWORD PTR $T42341[ebp]
	lea	eax, DWORD PTR $T42341[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$40034[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+8]
	push	eax
	mov	ecx, DWORD PTR _i$40034[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	mov	ecx, DWORD PTR _i$40034[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	lea	ecx, DWORD PTR _vert$40038[ebp]
	call	??0?$tvec4@M@detail@glm@@QAE@ABM000@Z	; glm::detail::tvec4<float>::tvec4<float>

; 101  :         vert = lidTransform * vert;

	lea	eax, DWORD PTR _vert$40038[ebp]
	push	eax
	lea	ecx, DWORD PTR _lidTransform$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42342[ebp]
	push	edx
	call	??$?DM@detail@glm@@YA?AU?$tvec4@M@01@ABU?$tmat4x4@M@01@ABU201@@Z ; glm::detail::operator*<float>
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _vert$40038[ebp]
	call	??4?$tvec4@M@detail@glm@@QAEAAU012@ABU012@@Z ; glm::detail::tvec4<float>::operator=

; 102  :         v[i] = vert.x;

	mov	eax, DWORD PTR _i$40034[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR _vert$40038[ebp]
	fstp	DWORD PTR [ecx+eax*4]

; 103  :         v[i+1] = vert.y;

	mov	eax, DWORD PTR _i$40034[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR _vert$40038[ebp+4]
	fstp	DWORD PTR [ecx+eax*4+4]

; 104  :         v[i+2] = vert.z;

	mov	eax, DWORD PTR _i$40034[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR _vert$40038[ebp+8]
	fstp	DWORD PTR [ecx+eax*4+8]

; 105  :     }

	jmp	$LN2@moveLid
$LN1@moveLid:

; 106  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@moveLid
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	72					; 00000048H
	npad	1
$LN9@moveLid:
	DD	2
	DD	$LN8@moveLid
$LN8@moveLid:
	DD	-68					; ffffffbcH
	DD	16					; 00000010H
	DD	$LN6@moveLid
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN7@moveLid
$LN7@moveLid:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN6@moveLid:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
?moveLid@VBOTeapot@@AAEXHPAMU?$tmat4x4@M@detail@glm@@@Z ENDP ; VBOTeapot::moveLid
_TEXT	ENDS
PUBLIC	??0?$tmat3x3@M@detail@glm@@QAE@ABU?$tvec3@M@12@00@Z ; glm::detail::tmat3x3<float>::tmat3x3<float>
PUBLIC	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z		; glm::detail::tvec3<float>::tvec3<float>
PUBLIC	__real@bf800000
PUBLIC	__real@00000000
PUBLIC	?buildPatch@VBOTeapot@@AAEXQAY03U?$tvec3@M@detail@glm@@PAM1111PAIAAH33HU?$tmat3x3@M@34@_N@Z ; VBOTeapot::buildPatch
PUBLIC	??0?$tmat3x3@M@detail@glm@@QAE@ABM@Z		; glm::detail::tmat3x3<float>::tmat3x3<float>
PUBLIC	?getPatch@VBOTeapot@@AAEXHQAY03U?$tvec3@M@detail@glm@@_N@Z ; VBOTeapot::getPatch
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0?$tvec3@M@detail@glm@@QAE@XZ			; glm::detail::tvec3<float>::tvec3<float>
PUBLIC	__$ArrayPad$
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?buildPatchReflect@VBOTeapot@@AAEXHPAM0000PAIAAH22H_N3@Z
_TEXT	SEGMENT
$T42354 = -1156						; size = 4
$T42356 = -1132						; size = 12
$T42357 = -1112						; size = 4
$T42358 = -1100						; size = 4
$T42359 = -1088						; size = 4
$T42360 = -1076						; size = 12
$T42361 = -1056						; size = 4
$T42362 = -1044						; size = 4
$T42363 = -1032						; size = 4
$T42364 = -1020						; size = 12
$T42365 = -1000						; size = 4
$T42366 = -988						; size = 4
$T42367 = -976						; size = 4
$T42369 = -952						; size = 12
$T42370 = -932						; size = 4
$T42371 = -920						; size = 4
$T42372 = -908						; size = 4
$T42373 = -896						; size = 12
$T42374 = -876						; size = 4
$T42375 = -864						; size = 4
$T42376 = -852						; size = 4
$T42377 = -840						; size = 12
$T42378 = -820						; size = 4
$T42379 = -808						; size = 4
$T42380 = -796						; size = 4
$T42382 = -772						; size = 12
$T42383 = -752						; size = 4
$T42384 = -740						; size = 4
$T42385 = -728						; size = 4
$T42386 = -716						; size = 12
$T42387 = -696						; size = 4
$T42388 = -684						; size = 4
$T42389 = -672						; size = 4
$T42390 = -660						; size = 12
$T42391 = -640						; size = 4
$T42392 = -628						; size = 4
$T42393 = -616						; size = 4
_patchRevV$ = -412					; size = 192
_patch$ = -212						; size = 192
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_patchNum$ = 8						; size = 4
_B$ = 12						; size = 4
_dB$ = 16						; size = 4
_v$ = 20						; size = 4
_n$ = 24						; size = 4
_tc$ = 28						; size = 4
_el$ = 32						; size = 4
_index$ = 36						; size = 4
_elIndex$ = 40						; size = 4
_tcIndex$ = 44						; size = 4
_grid$ = 48						; size = 4
_reflectX$ = 52						; size = 1
_reflectY$ = 56						; size = 1
?buildPatchReflect@VBOTeapot@@AAEXHPAM0000PAIAAH22H_N3@Z PROC ; VBOTeapot::buildPatchReflect, COMDAT
; _this$ = ecx

; 114  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1172				; 00000494H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1172]
	mov	ecx, 293				; 00000125H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 115  :     vec3 patch[4][4];

	push	OFFSET ??0?$tvec3@M@detail@glm@@QAE@XZ	; glm::detail::tvec3<float>::tvec3<float>
	push	16					; 00000010H
	push	12					; 0000000cH
	lea	eax, DWORD PTR _patch$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 116  :     vec3 patchRevV[4][4];

	push	OFFSET ??0?$tvec3@M@detail@glm@@QAE@XZ	; glm::detail::tvec3<float>::tvec3<float>
	push	16					; 00000010H
	push	12					; 0000000cH
	lea	eax, DWORD PTR _patchRevV$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 117  :     getPatch(patchNum, patch, false);

	push	0
	lea	eax, DWORD PTR _patch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _patchNum$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getPatch@VBOTeapot@@AAEXHQAY03U?$tvec3@M@detail@glm@@_N@Z ; VBOTeapot::getPatch

; 118  :     getPatch(patchNum, patchRevV, true);

	push	1
	lea	eax, DWORD PTR _patchRevV$[ebp]
	push	eax
	mov	ecx, DWORD PTR _patchNum$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getPatch@VBOTeapot@@AAEXHQAY03U?$tvec3@M@detail@glm@@_N@Z ; VBOTeapot::getPatch

; 119  : 
; 120  :     // Patch without modification
; 121  :     buildPatch(patch, B, dB, v, n, tc, el,
; 122  :                index, elIndex, tcIndex, grid, mat3(1.0f), true);

	fld1
	fstp	DWORD PTR $T42354[ebp]
	push	1
	sub	esp, 36					; 00000024H
	mov	ecx, esp
	lea	eax, DWORD PTR $T42354[ebp]
	push	eax
	call	??0?$tmat3x3@M@detail@glm@@QAE@ABM@Z	; glm::detail::tmat3x3<float>::tmat3x3<float>
	mov	ecx, DWORD PTR _grid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tcIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _elIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _el$[ebp]
	push	edx
	mov	eax, DWORD PTR _tc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _dB$[ebp]
	push	eax
	mov	ecx, DWORD PTR _B$[ebp]
	push	ecx
	lea	edx, DWORD PTR _patch$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?buildPatch@VBOTeapot@@AAEXQAY03U?$tvec3@M@detail@glm@@PAM1111PAIAAH33HU?$tmat3x3@M@34@_N@Z ; VBOTeapot::buildPatch

; 123  : 
; 124  :     // Patch reflected in x
; 125  :     if( reflectX ) {

	movzx	eax, BYTE PTR _reflectX$[ebp]
	test	eax, eax
	je	$LN3@buildPatch

; 126  :         buildPatch(patchRevV, B, dB, v, n, tc, el,
; 127  :                    index, elIndex, tcIndex, grid, mat3(vec3(-1.0f, 0.0f, 0.0f),
; 128  :                                               vec3(0.0f, 1.0f, 0.0f),
; 129  :                                               vec3(0.0f, 0.0f, 1.0f) ), false );

	fld1
	fstp	DWORD PTR $T42357[ebp]
	fldz
	fstp	DWORD PTR $T42358[ebp]
	fldz
	fstp	DWORD PTR $T42359[ebp]
	fldz
	fstp	DWORD PTR $T42361[ebp]
	fld1
	fstp	DWORD PTR $T42362[ebp]
	fldz
	fstp	DWORD PTR $T42363[ebp]
	fldz
	fstp	DWORD PTR $T42365[ebp]
	fldz
	fstp	DWORD PTR $T42366[ebp]
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR $T42367[ebp]
	push	0
	lea	eax, DWORD PTR $T42357[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42358[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42359[ebp]
	push	edx
	lea	ecx, DWORD PTR $T42356[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>
	sub	esp, 36					; 00000024H
	mov	esi, esp
	push	eax
	lea	eax, DWORD PTR $T42361[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42362[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42363[ebp]
	push	edx
	lea	ecx, DWORD PTR $T42360[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>
	push	eax
	lea	eax, DWORD PTR $T42365[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42366[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42367[ebp]
	push	edx
	lea	ecx, DWORD PTR $T42364[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>
	push	eax
	mov	ecx, esi
	call	??0?$tmat3x3@M@detail@glm@@QAE@ABU?$tvec3@M@12@00@Z ; glm::detail::tmat3x3<float>::tmat3x3<float>
	mov	eax, DWORD PTR _grid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tcIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _elIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _el$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tc$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dB$[ebp]
	push	edx
	mov	eax, DWORD PTR _B$[ebp]
	push	eax
	lea	ecx, DWORD PTR _patchRevV$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?buildPatch@VBOTeapot@@AAEXQAY03U?$tvec3@M@detail@glm@@PAM1111PAIAAH33HU?$tmat3x3@M@34@_N@Z ; VBOTeapot::buildPatch
$LN3@buildPatch:

; 130  :     }
; 131  : 
; 132  :     // Patch reflected in y
; 133  :     if( reflectY ) {

	movzx	eax, BYTE PTR _reflectY$[ebp]
	test	eax, eax
	je	$LN2@buildPatch

; 134  :         buildPatch(patchRevV, B, dB, v, n, tc, el,
; 135  :                    index, elIndex, tcIndex, grid, mat3(vec3(1.0f, 0.0f, 0.0f),
; 136  :                                               vec3(0.0f, -1.0f, 0.0f),
; 137  :                                               vec3(0.0f, 0.0f, 1.0f) ), false );

	fld1
	fstp	DWORD PTR $T42370[ebp]
	fldz
	fstp	DWORD PTR $T42371[ebp]
	fldz
	fstp	DWORD PTR $T42372[ebp]
	fldz
	fstp	DWORD PTR $T42374[ebp]
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR $T42375[ebp]
	fldz
	fstp	DWORD PTR $T42376[ebp]
	fldz
	fstp	DWORD PTR $T42378[ebp]
	fldz
	fstp	DWORD PTR $T42379[ebp]
	fld1
	fstp	DWORD PTR $T42380[ebp]
	push	0
	lea	eax, DWORD PTR $T42370[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42371[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42372[ebp]
	push	edx
	lea	ecx, DWORD PTR $T42369[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>
	sub	esp, 36					; 00000024H
	mov	esi, esp
	push	eax
	lea	eax, DWORD PTR $T42374[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42375[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42376[ebp]
	push	edx
	lea	ecx, DWORD PTR $T42373[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>
	push	eax
	lea	eax, DWORD PTR $T42378[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42379[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42380[ebp]
	push	edx
	lea	ecx, DWORD PTR $T42377[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>
	push	eax
	mov	ecx, esi
	call	??0?$tmat3x3@M@detail@glm@@QAE@ABU?$tvec3@M@12@00@Z ; glm::detail::tmat3x3<float>::tmat3x3<float>
	mov	eax, DWORD PTR _grid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tcIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _elIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _el$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tc$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dB$[ebp]
	push	edx
	mov	eax, DWORD PTR _B$[ebp]
	push	eax
	lea	ecx, DWORD PTR _patchRevV$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?buildPatch@VBOTeapot@@AAEXQAY03U?$tvec3@M@detail@glm@@PAM1111PAIAAH33HU?$tmat3x3@M@34@_N@Z ; VBOTeapot::buildPatch
$LN2@buildPatch:

; 138  :     }
; 139  : 
; 140  :     // Patch reflected in x and y
; 141  :     if( reflectX && reflectY ) {

	movzx	eax, BYTE PTR _reflectX$[ebp]
	test	eax, eax
	je	$LN1@buildPatch
	movzx	eax, BYTE PTR _reflectY$[ebp]
	test	eax, eax
	je	$LN1@buildPatch

; 142  :         buildPatch(patch, B, dB, v, n, tc, el,
; 143  :                    index, elIndex, tcIndex, grid, mat3(vec3(-1.0f, 0.0f, 0.0f),
; 144  :                                               vec3(0.0f, -1.0f, 0.0f),
; 145  :                                               vec3(0.0f, 0.0f, 1.0f) ), true );

	fld1
	fstp	DWORD PTR $T42383[ebp]
	fldz
	fstp	DWORD PTR $T42384[ebp]
	fldz
	fstp	DWORD PTR $T42385[ebp]
	fldz
	fstp	DWORD PTR $T42387[ebp]
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR $T42388[ebp]
	fldz
	fstp	DWORD PTR $T42389[ebp]
	fldz
	fstp	DWORD PTR $T42391[ebp]
	fldz
	fstp	DWORD PTR $T42392[ebp]
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR $T42393[ebp]
	push	1
	lea	eax, DWORD PTR $T42383[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42384[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42385[ebp]
	push	edx
	lea	ecx, DWORD PTR $T42382[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>
	sub	esp, 36					; 00000024H
	mov	esi, esp
	push	eax
	lea	eax, DWORD PTR $T42387[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42388[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42389[ebp]
	push	edx
	lea	ecx, DWORD PTR $T42386[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>
	push	eax
	lea	eax, DWORD PTR $T42391[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42392[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42393[ebp]
	push	edx
	lea	ecx, DWORD PTR $T42390[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>
	push	eax
	mov	ecx, esi
	call	??0?$tmat3x3@M@detail@glm@@QAE@ABU?$tvec3@M@12@00@Z ; glm::detail::tmat3x3<float>::tmat3x3<float>
	mov	eax, DWORD PTR _grid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tcIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _elIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _el$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tc$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dB$[ebp]
	push	edx
	mov	eax, DWORD PTR _B$[ebp]
	push	eax
	lea	ecx, DWORD PTR _patch$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?buildPatch@VBOTeapot@@AAEXQAY03U?$tvec3@M@detail@glm@@PAM1111PAIAAH33HU?$tmat3x3@M@34@_N@Z ; VBOTeapot::buildPatch
$LN1@buildPatch:

; 146  :     }
; 147  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@buildPatch
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1172				; 00000494H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	52					; 00000034H
$LN9@buildPatch:
	DD	2
	DD	$LN8@buildPatch
$LN8@buildPatch:
	DD	-212					; ffffff2cH
	DD	192					; 000000c0H
	DD	$LN6@buildPatch
	DD	-412					; fffffe64H
	DD	192					; 000000c0H
	DD	$LN7@buildPatch
$LN7@buildPatch:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	86					; 00000056H
	DB	0
$LN6@buildPatch:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
?buildPatchReflect@VBOTeapot@@AAEXHPAM0000PAIAAH22H_N3@Z ENDP ; VBOTeapot::buildPatchReflect
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??4?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z	; glm::detail::tvec3<float>::operator=
PUBLIC	??$?GM@detail@glm@@YA?AU?$tvec3@M@01@ABU201@@Z	; glm::detail::operator-<float>
PUBLIC	?evaluateNormal@VBOTeapot@@AAE?AU?$tvec3@M@detail@glm@@HHPAM0QAY03U234@@Z ; VBOTeapot::evaluateNormal
PUBLIC	??$?DM@detail@glm@@YA?AU?$tvec3@M@01@ABU?$tmat3x3@M@01@ABU201@@Z ; glm::detail::operator*<float>
PUBLIC	?evaluate@VBOTeapot@@AAE?AU?$tvec3@M@detail@glm@@HHPAMQAY03U234@@Z ; VBOTeapot::evaluate
PUBLIC	__real@3ff0000000000000
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?buildPatch@VBOTeapot@@AAEXQAY03U?$tvec3@M@detail@glm@@PAM1111PAIAAH33HU?$tmat3x3@M@34@_N@Z
_TEXT	SEGMENT
$T42407 = -408						; size = 12
$T42408 = -388						; size = 12
$T42409 = -368						; size = 12
_j$41388 = -144						; size = 4
_nextiStart$41387 = -132				; size = 4
_iStart$41386 = -120					; size = 4
_i$41382 = -108						; size = 4
_norm$41361 = -96					; size = 12
_pt$41339 = -76						; size = 12
_j$41335 = -56						; size = 4
_i$41331 = -44						; size = 4
_tcFactor$ = -32					; size = 4
_startIndex$ = -20					; size = 4
_this$ = -8						; size = 4
_patch$ = 8						; size = 4
_B$ = 12						; size = 4
_dB$ = 16						; size = 4
_v$ = 20						; size = 4
_n$ = 24						; size = 4
_tc$ = 28						; size = 4
_el$ = 32						; size = 4
_index$ = 36						; size = 4
_elIndex$ = 40						; size = 4
_tcIndex$ = 44						; size = 4
_grid$ = 48						; size = 4
_reflect$ = 52						; size = 36
_invertNormal$ = 88					; size = 1
?buildPatch@VBOTeapot@@AAEXQAY03U?$tvec3@M@detail@glm@@PAM1111PAIAAH33HU?$tmat3x3@M@34@_N@Z PROC ; VBOTeapot::buildPatch, COMDAT
; _this$ = ecx

; 155  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 412				; 0000019cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-412]
	mov	ecx, 103				; 00000067H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  :     int startIndex = index / 3;

	mov	eax, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR [eax]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _startIndex$[ebp], eax

; 157  :     float tcFactor = 1.0f / grid;

	fild	DWORD PTR _grid$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _tcFactor$[ebp]

; 158  : 
; 159  :     for( int i = 0; i <= grid; i++ )

	mov	DWORD PTR _i$41331[ebp], 0
	jmp	SHORT $LN13@buildPatch@2
$LN12@buildPatch@2:
	mov	eax, DWORD PTR _i$41331[ebp]
	add	eax, 1
	mov	DWORD PTR _i$41331[ebp], eax
$LN13@buildPatch@2:
	mov	eax, DWORD PTR _i$41331[ebp]
	cmp	eax, DWORD PTR _grid$[ebp]
	jg	$LN11@buildPatch@2

; 160  :     {
; 161  :         for( int j = 0 ; j <= grid; j++)

	mov	DWORD PTR _j$41335[ebp], 0
	jmp	SHORT $LN10@buildPatch@2
$LN9@buildPatch@2:
	mov	eax, DWORD PTR _j$41335[ebp]
	add	eax, 1
	mov	DWORD PTR _j$41335[ebp], eax
$LN10@buildPatch@2:
	mov	eax, DWORD PTR _j$41335[ebp]
	cmp	eax, DWORD PTR _grid$[ebp]
	jg	$LN8@buildPatch@2

; 162  :         {
; 163  :             vec3 pt = reflect * evaluate(i,j,B,patch);

	mov	eax, DWORD PTR _patch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _B$[ebp]
	push	ecx
	mov	edx, DWORD PTR _j$41335[ebp]
	push	edx
	mov	eax, DWORD PTR _i$41331[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42407[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?evaluate@VBOTeapot@@AAE?AU?$tvec3@M@detail@glm@@HHPAMQAY03U234@@Z ; VBOTeapot::evaluate
	push	eax
	lea	edx, DWORD PTR _reflect$[ebp]
	push	edx
	lea	eax, DWORD PTR _pt$41339[ebp]
	push	eax
	call	??$?DM@detail@glm@@YA?AU?$tvec3@M@01@ABU?$tmat3x3@M@01@ABU201@@Z ; glm::detail::operator*<float>
	add	esp, 12					; 0000000cH

; 164  :             vec3 norm = reflect * evaluateNormal(i,j,B,dB,patch);

	mov	eax, DWORD PTR _patch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dB$[ebp]
	push	ecx
	mov	edx, DWORD PTR _B$[ebp]
	push	edx
	mov	eax, DWORD PTR _j$41335[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$41331[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42408[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?evaluateNormal@VBOTeapot@@AAE?AU?$tvec3@M@detail@glm@@HHPAM0QAY03U234@@Z ; VBOTeapot::evaluateNormal
	push	eax
	lea	eax, DWORD PTR _reflect$[ebp]
	push	eax
	lea	ecx, DWORD PTR _norm$41361[ebp]
	push	ecx
	call	??$?DM@detail@glm@@YA?AU?$tvec3@M@01@ABU?$tmat3x3@M@01@ABU201@@Z ; glm::detail::operator*<float>
	add	esp, 12					; 0000000cH

; 165  :             if( invertNormal )

	movzx	eax, BYTE PTR _invertNormal$[ebp]
	test	eax, eax
	je	SHORT $LN7@buildPatch@2

; 166  :                 norm = -norm;

	lea	eax, DWORD PTR _norm$41361[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42409[ebp]
	push	ecx
	call	??$?GM@detail@glm@@YA?AU?$tvec3@M@01@ABU201@@Z ; glm::detail::operator-<float>
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _norm$41361[ebp]
	call	??4?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z ; glm::detail::tvec3<float>::operator=
$LN7@buildPatch@2:

; 167  : 
; 168  :             v[index] = pt.x;

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR _pt$41339[ebp]
	fstp	DWORD PTR [edx+ecx*4]

; 169  :             v[index+1] = pt.y;

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR _pt$41339[ebp+4]
	fstp	DWORD PTR [edx+ecx*4+4]

; 170  :             v[index+2] = pt.z;

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR _pt$41339[ebp+8]
	fstp	DWORD PTR [edx+ecx*4+8]

; 171  : 
; 172  :             n[index] = norm.x;

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _n$[ebp]
	fld	DWORD PTR _norm$41361[ebp]
	fstp	DWORD PTR [edx+ecx*4]

; 173  :             n[index+1] = norm.y;

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _n$[ebp]
	fld	DWORD PTR _norm$41361[ebp+4]
	fstp	DWORD PTR [edx+ecx*4+4]

; 174  :             n[index+2] = norm.z;

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _n$[ebp]
	fld	DWORD PTR _norm$41361[ebp+8]
	fstp	DWORD PTR [edx+ecx*4+8]

; 175  : 
; 176  :             tc[tcIndex] = i * tcFactor;

	fild	DWORD PTR _i$41331[ebp]
	fmul	DWORD PTR _tcFactor$[ebp]
	mov	eax, DWORD PTR _tcIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _tc$[ebp]
	fstp	DWORD PTR [edx+ecx*4]

; 177  :             tc[tcIndex+1] = j * tcFactor;

	fild	DWORD PTR _j$41335[ebp]
	fmul	DWORD PTR _tcFactor$[ebp]
	mov	eax, DWORD PTR _tcIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _tc$[ebp]
	fstp	DWORD PTR [edx+ecx*4+4]

; 178  : 
; 179  :             index += 3;

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 3
	mov	edx, DWORD PTR _index$[ebp]
	mov	DWORD PTR [edx], ecx

; 180  :             tcIndex += 2;

	mov	eax, DWORD PTR _tcIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _tcIndex$[ebp]
	mov	DWORD PTR [edx], ecx

; 181  :         }

	jmp	$LN9@buildPatch@2
$LN8@buildPatch@2:

; 182  :     }

	jmp	$LN12@buildPatch@2
$LN11@buildPatch@2:

; 183  : 
; 184  :     for( int i = 0; i < grid; i++ )

	mov	DWORD PTR _i$41382[ebp], 0
	jmp	SHORT $LN6@buildPatch@2
$LN5@buildPatch@2:
	mov	eax, DWORD PTR _i$41382[ebp]
	add	eax, 1
	mov	DWORD PTR _i$41382[ebp], eax
$LN6@buildPatch@2:
	mov	eax, DWORD PTR _i$41382[ebp]
	cmp	eax, DWORD PTR _grid$[ebp]
	jge	$LN4@buildPatch@2

; 185  :     {
; 186  :         int iStart = i * (grid+1) + startIndex;

	mov	eax, DWORD PTR _grid$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _i$41382[ebp]
	add	eax, DWORD PTR _startIndex$[ebp]
	mov	DWORD PTR _iStart$41386[ebp], eax

; 187  :         int nextiStart = (i+1) * (grid+1) + startIndex;

	mov	eax, DWORD PTR _i$41382[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _grid$[ebp]
	add	ecx, 1
	imul	eax, ecx
	add	eax, DWORD PTR _startIndex$[ebp]
	mov	DWORD PTR _nextiStart$41387[ebp], eax

; 188  :         for( int j = 0; j < grid; j++)

	mov	DWORD PTR _j$41388[ebp], 0
	jmp	SHORT $LN3@buildPatch@2
$LN2@buildPatch@2:
	mov	eax, DWORD PTR _j$41388[ebp]
	add	eax, 1
	mov	DWORD PTR _j$41388[ebp], eax
$LN3@buildPatch@2:
	mov	eax, DWORD PTR _j$41388[ebp]
	cmp	eax, DWORD PTR _grid$[ebp]
	jge	$LN1@buildPatch@2

; 189  :         {
; 190  :             el[elIndex] = iStart + j;

	mov	eax, DWORD PTR _iStart$41386[ebp]
	add	eax, DWORD PTR _j$41388[ebp]
	mov	ecx, DWORD PTR _elIndex$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _el$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 191  :             el[elIndex+1] = nextiStart + j + 1;

	mov	eax, DWORD PTR _j$41388[ebp]
	mov	ecx, DWORD PTR _nextiStart$41387[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	eax, DWORD PTR _elIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _el$[ebp]
	mov	DWORD PTR [eax+ecx*4+4], edx

; 192  :             el[elIndex+2] = nextiStart + j;

	mov	eax, DWORD PTR _nextiStart$41387[ebp]
	add	eax, DWORD PTR _j$41388[ebp]
	mov	ecx, DWORD PTR _elIndex$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _el$[ebp]
	mov	DWORD PTR [ecx+edx*4+8], eax

; 193  : 
; 194  :             el[elIndex+3] = iStart + j;

	mov	eax, DWORD PTR _iStart$41386[ebp]
	add	eax, DWORD PTR _j$41388[ebp]
	mov	ecx, DWORD PTR _elIndex$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _el$[ebp]
	mov	DWORD PTR [ecx+edx*4+12], eax

; 195  :             el[elIndex+4] = iStart + j + 1;

	mov	eax, DWORD PTR _j$41388[ebp]
	mov	ecx, DWORD PTR _iStart$41386[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	eax, DWORD PTR _elIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _el$[ebp]
	mov	DWORD PTR [eax+ecx*4+16], edx

; 196  :             el[elIndex+5] = nextiStart + j + 1;

	mov	eax, DWORD PTR _j$41388[ebp]
	mov	ecx, DWORD PTR _nextiStart$41387[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	eax, DWORD PTR _elIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _el$[ebp]
	mov	DWORD PTR [eax+ecx*4+20], edx

; 197  : 
; 198  :             elIndex += 6;

	mov	eax, DWORD PTR _elIndex$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 6
	mov	edx, DWORD PTR _elIndex$[ebp]
	mov	DWORD PTR [edx], ecx

; 199  :         }

	jmp	$LN2@buildPatch@2
$LN1@buildPatch@2:

; 200  :     }

	jmp	$LN5@buildPatch@2
$LN4@buildPatch@2:

; 201  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@buildPatch@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 412				; 0000019cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	84					; 00000054H
$LN20@buildPatch@2:
	DD	3
	DD	$LN19@buildPatch@2
$LN19@buildPatch@2:
	DD	-76					; ffffffb4H
	DD	12					; 0000000cH
	DD	$LN16@buildPatch@2
	DD	-96					; ffffffa0H
	DD	12					; 0000000cH
	DD	$LN17@buildPatch@2
	DD	-156					; ffffff64H
	DD	4
	DD	$LN18@buildPatch@2
$LN18@buildPatch@2:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN17@buildPatch@2:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
$LN16@buildPatch@2:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	0
?buildPatch@VBOTeapot@@AAEXQAY03U?$tvec3@M@detail@glm@@PAM1111PAIAAH33HU?$tmat3x3@M@34@_N@Z ENDP ; VBOTeapot::buildPatch
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getPatch@VBOTeapot@@AAEXHQAY03U?$tvec3@M@detail@glm@@_N@Z
_TEXT	SEGMENT
$T42419 = -264						; size = 12
$T42420 = -244						; size = 12
_v$41402 = -32						; size = 4
_u$41398 = -20						; size = 4
_this$ = -8						; size = 4
_patchNum$ = 8						; size = 4
_patch$ = 12						; size = 4
_reverseV$ = 16						; size = 1
?getPatch@VBOTeapot@@AAEXHQAY03U?$tvec3@M@detail@glm@@_N@Z PROC ; VBOTeapot::getPatch, COMDAT
; _this$ = ecx

; 204  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 205  :     for( int u = 0; u < 4; u++) {          // Loop in u direction

	mov	DWORD PTR _u$41398[ebp], 0
	jmp	SHORT $LN8@getPatch
$LN7@getPatch:
	mov	eax, DWORD PTR _u$41398[ebp]
	add	eax, 1
	mov	DWORD PTR _u$41398[ebp], eax
$LN8@getPatch:
	cmp	DWORD PTR _u$41398[ebp], 4
	jge	$LN9@getPatch

; 206  :         for( int v = 0; v < 4; v++ ) {     // Loop in v direction

	mov	DWORD PTR _v$41402[ebp], 0
	jmp	SHORT $LN5@getPatch
$LN4@getPatch:
	mov	eax, DWORD PTR _v$41402[ebp]
	add	eax, 1
	mov	DWORD PTR _v$41402[ebp], eax
$LN5@getPatch:
	cmp	DWORD PTR _v$41402[ebp], 4
	jge	$LN3@getPatch

; 207  :             if( reverseV ) {

	movzx	eax, BYTE PTR _reverseV$[ebp]
	test	eax, eax
	je	$LN2@getPatch

; 208  :                 patch[u][v] = vec3(
; 209  :                         Teapot::cpdata[Teapot::patchdata[patchNum][u*4+(3-v)]][0],
; 210  :                         Teapot::cpdata[Teapot::patchdata[patchNum][u*4+(3-v)]][1],
; 211  :                         Teapot::cpdata[Teapot::patchdata[patchNum][u*4+(3-v)]][2]
; 212  :                         );

	mov	eax, DWORD PTR _patchNum$[ebp]
	shl	eax, 6
	mov	ecx, 3
	sub	ecx, DWORD PTR _v$41402[ebp]
	mov	edx, DWORD PTR _u$41398[ebp]
	lea	ecx, DWORD PTR [ecx+edx*4]
	mov	edx, DWORD PTR _patchdata[eax+ecx*4]
	imul	edx, 12					; 0000000cH
	add	edx, OFFSET _cpdata+8
	push	edx
	mov	eax, DWORD PTR _patchNum$[ebp]
	shl	eax, 6
	mov	ecx, 3
	sub	ecx, DWORD PTR _v$41402[ebp]
	mov	edx, DWORD PTR _u$41398[ebp]
	lea	ecx, DWORD PTR [ecx+edx*4]
	mov	edx, DWORD PTR _patchdata[eax+ecx*4]
	imul	edx, 12					; 0000000cH
	add	edx, OFFSET _cpdata+4
	push	edx
	mov	eax, DWORD PTR _patchNum$[ebp]
	shl	eax, 6
	mov	ecx, 3
	sub	ecx, DWORD PTR _v$41402[ebp]
	mov	edx, DWORD PTR _u$41398[ebp]
	lea	ecx, DWORD PTR [ecx+edx*4]
	mov	edx, DWORD PTR _patchdata[eax+ecx*4]
	imul	edx, 12					; 0000000cH
	add	edx, OFFSET _cpdata
	push	edx
	lea	ecx, DWORD PTR $T42419[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>
	push	eax
	mov	ecx, DWORD PTR _u$41398[ebp]
	imul	ecx, 48					; 00000030H
	add	ecx, DWORD PTR _patch$[ebp]
	mov	eax, DWORD PTR _v$41402[ebp]
	imul	eax, 12					; 0000000cH
	add	ecx, eax
	call	??4?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z ; glm::detail::tvec3<float>::operator=

; 213  :             } else {

	jmp	$LN1@getPatch
$LN2@getPatch:

; 214  :                 patch[u][v] = vec3(
; 215  :                         Teapot::cpdata[Teapot::patchdata[patchNum][u*4+v]][0],
; 216  :                         Teapot::cpdata[Teapot::patchdata[patchNum][u*4+v]][1],
; 217  :                         Teapot::cpdata[Teapot::patchdata[patchNum][u*4+v]][2]
; 218  :                         );

	mov	eax, DWORD PTR _patchNum$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _u$41398[ebp]
	mov	edx, DWORD PTR _v$41402[ebp]
	lea	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _patchdata[eax+ecx*4]
	imul	edx, 12					; 0000000cH
	add	edx, OFFSET _cpdata+8
	push	edx
	mov	eax, DWORD PTR _patchNum$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _u$41398[ebp]
	mov	edx, DWORD PTR _v$41402[ebp]
	lea	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _patchdata[eax+ecx*4]
	imul	edx, 12					; 0000000cH
	add	edx, OFFSET _cpdata+4
	push	edx
	mov	eax, DWORD PTR _patchNum$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _u$41398[ebp]
	mov	edx, DWORD PTR _v$41402[ebp]
	lea	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _patchdata[eax+ecx*4]
	imul	edx, 12					; 0000000cH
	add	edx, OFFSET _cpdata
	push	edx
	lea	ecx, DWORD PTR $T42420[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>
	push	eax
	mov	ecx, DWORD PTR _u$41398[ebp]
	imul	ecx, 48					; 00000030H
	add	ecx, DWORD PTR _patch$[ebp]
	mov	eax, DWORD PTR _v$41402[ebp]
	imul	eax, 12					; 0000000cH
	add	ecx, eax
	call	??4?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z ; glm::detail::tvec3<float>::operator=
$LN1@getPatch:

; 219  :             }
; 220  :         }

	jmp	$LN4@getPatch
$LN3@getPatch:

; 221  :     }

	jmp	$LN7@getPatch
$LN9@getPatch:

; 222  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getPatch@VBOTeapot@@AAEXHQAY03U?$tvec3@M@detail@glm@@_N@Z ENDP ; VBOTeapot::getPatch
_TEXT	ENDS
PUBLIC	__real@4018000000000000
PUBLIC	__real@c018000000000000
PUBLIC	__real@c008000000000000
PUBLIC	__real@4008000000000000
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@c018000000000000
CONST	SEGMENT
__real@c018000000000000 DQ 0c018000000000000r	; -6
CONST	ENDS
;	COMDAT __real@c008000000000000
CONST	SEGMENT
__real@c008000000000000 DQ 0c008000000000000r	; -3
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?computeBasisFunctions@VBOTeapot@@AAEXPAM0H@Z
_TEXT	SEGMENT
_oneMinusT2$41424 = -80					; size = 4
_oneMinusT$41423 = -68					; size = 4
_tSqr$41422 = -56					; size = 4
_t$41421 = -44						; size = 4
_i$41417 = -32						; size = 4
_inc$ = -20						; size = 4
_this$ = -8						; size = 4
_B$ = 8							; size = 4
_dB$ = 12						; size = 4
_grid$ = 16						; size = 4
?computeBasisFunctions@VBOTeapot@@AAEXPAM0H@Z PROC	; VBOTeapot::computeBasisFunctions, COMDAT
; _this$ = ecx

; 224  : void VBOTeapot::computeBasisFunctions( float * B, float * dB, int grid ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 225  :     float inc = 1.0f / grid;

	fild	DWORD PTR _grid$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _inc$[ebp]

; 226  :     for( int i = 0; i <= grid; i++ )

	mov	DWORD PTR _i$41417[ebp], 0
	jmp	SHORT $LN3@computeBas
$LN2@computeBas:
	mov	eax, DWORD PTR _i$41417[ebp]
	add	eax, 1
	mov	DWORD PTR _i$41417[ebp], eax
$LN3@computeBas:
	mov	eax, DWORD PTR _i$41417[ebp]
	cmp	eax, DWORD PTR _grid$[ebp]
	jg	$LN1@computeBas

; 227  :     {
; 228  :         float t = i * inc;

	fild	DWORD PTR _i$41417[ebp]
	fmul	DWORD PTR _inc$[ebp]
	fstp	DWORD PTR _t$41421[ebp]

; 229  :         float tSqr = t * t;

	fld	DWORD PTR _t$41421[ebp]
	fmul	DWORD PTR _t$41421[ebp]
	fstp	DWORD PTR _tSqr$41422[ebp]

; 230  :         float oneMinusT = (1.0f - t);

	fld	DWORD PTR _t$41421[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR _oneMinusT$41423[ebp]

; 231  :         float oneMinusT2 = oneMinusT * oneMinusT;

	fld	DWORD PTR _oneMinusT$41423[ebp]
	fmul	DWORD PTR _oneMinusT$41423[ebp]
	fstp	DWORD PTR _oneMinusT2$41424[ebp]

; 232  : 
; 233  :         B[i*4 + 0] = oneMinusT * oneMinusT2;

	fld	DWORD PTR _oneMinusT$41423[ebp]
	fmul	DWORD PTR _oneMinusT2$41424[ebp]
	mov	eax, DWORD PTR _i$41417[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _B$[ebp]
	fstp	DWORD PTR [ecx+eax*4]

; 234  :         B[i*4 + 1] = 3.0f * oneMinusT2 * t;

	fld	DWORD PTR _oneMinusT2$41424[ebp]
	fmul	QWORD PTR __real@4008000000000000
	fmul	DWORD PTR _t$41421[ebp]
	mov	eax, DWORD PTR _i$41417[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _B$[ebp]
	fstp	DWORD PTR [ecx+eax*4+4]

; 235  :         B[i*4 + 2] = 3.0f * oneMinusT * tSqr;

	fld	DWORD PTR _oneMinusT$41423[ebp]
	fmul	QWORD PTR __real@4008000000000000
	fmul	DWORD PTR _tSqr$41422[ebp]
	mov	eax, DWORD PTR _i$41417[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _B$[ebp]
	fstp	DWORD PTR [ecx+eax*4+8]

; 236  :         B[i*4 + 3] = t * tSqr;

	fld	DWORD PTR _t$41421[ebp]
	fmul	DWORD PTR _tSqr$41422[ebp]
	mov	eax, DWORD PTR _i$41417[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _B$[ebp]
	fstp	DWORD PTR [ecx+eax*4+12]

; 237  : 
; 238  :         dB[i*4 + 0] = -3.0f * oneMinusT2;

	fld	DWORD PTR _oneMinusT2$41424[ebp]
	fmul	QWORD PTR __real@c008000000000000
	mov	eax, DWORD PTR _i$41417[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _dB$[ebp]
	fstp	DWORD PTR [ecx+eax*4]

; 239  :         dB[i*4 + 1] = -6.0f * t * oneMinusT + 3.0f * oneMinusT2;

	fld	DWORD PTR _t$41421[ebp]
	fmul	QWORD PTR __real@c018000000000000
	fmul	DWORD PTR _oneMinusT$41423[ebp]
	fld	DWORD PTR _oneMinusT2$41424[ebp]
	fmul	QWORD PTR __real@4008000000000000
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _i$41417[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _dB$[ebp]
	fstp	DWORD PTR [ecx+eax*4+4]

; 240  :         dB[i*4 + 2] = -3.0f * tSqr + 6.0f * t * oneMinusT;

	fld	DWORD PTR _tSqr$41422[ebp]
	fmul	QWORD PTR __real@c008000000000000
	fld	DWORD PTR _t$41421[ebp]
	fmul	QWORD PTR __real@4018000000000000
	fmul	DWORD PTR _oneMinusT$41423[ebp]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _i$41417[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _dB$[ebp]
	fstp	DWORD PTR [ecx+eax*4+8]

; 241  :         dB[i*4 + 3] = 3.0f * tSqr;

	fld	DWORD PTR _tSqr$41422[ebp]
	fmul	QWORD PTR __real@4008000000000000
	mov	eax, DWORD PTR _i$41417[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _dB$[ebp]
	fstp	DWORD PTR [ecx+eax*4+12]

; 242  :     }

	jmp	$LN2@computeBas
$LN1@computeBas:

; 243  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?computeBasisFunctions@VBOTeapot@@AAEXPAM0H@Z ENDP	; VBOTeapot::computeBasisFunctions
_TEXT	ENDS
PUBLIC	??0?$tvec3@M@detail@glm@@QAE@ABU012@@Z		; glm::detail::tvec3<float>::tvec3<float>
PUBLIC	??$?YM@?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z ; glm::detail::tvec3<float>::operator+=<float>
PUBLIC	??$?DM@detail@glm@@YA?AU?$tvec3@M@01@ABU201@ABM@Z ; glm::detail::operator*<float>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?evaluate@VBOTeapot@@AAE?AU?$tvec3@M@detail@glm@@HHPAMQAY03U234@@Z
_TEXT	SEGMENT
$T42433 = -320						; size = 4
$T42434 = -308						; size = 4
$T42435 = -296						; size = 4
$T42436 = -284						; size = 12
$T42437 = -264						; size = 12
_j$41441 = -52						; size = 4
_i$41437 = -40						; size = 4
_p$ = -28						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_gridU$ = 12						; size = 4
_gridV$ = 16						; size = 4
_B$ = 20						; size = 4
_patch$ = 24						; size = 4
?evaluate@VBOTeapot@@AAE?AU?$tvec3@M@detail@glm@@HHPAMQAY03U234@@Z PROC ; VBOTeapot::evaluate, COMDAT
; _this$ = ecx

; 247  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 248  :     vec3 p(0.0f,0.0f,0.0f);

	fldz
	fstp	DWORD PTR $T42433[ebp]
	fldz
	fstp	DWORD PTR $T42434[ebp]
	fldz
	fstp	DWORD PTR $T42435[ebp]
	lea	eax, DWORD PTR $T42433[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42434[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42435[ebp]
	push	edx
	lea	ecx, DWORD PTR _p$[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>

; 249  :     for( int i = 0; i < 4; i++) {

	mov	DWORD PTR _i$41437[ebp], 0
	jmp	SHORT $LN6@evaluate
$LN5@evaluate:
	mov	eax, DWORD PTR _i$41437[ebp]
	add	eax, 1
	mov	DWORD PTR _i$41437[ebp], eax
$LN6@evaluate:
	cmp	DWORD PTR _i$41437[ebp], 4
	jge	SHORT $LN4@evaluate

; 250  :         for( int j = 0; j < 4; j++) {

	mov	DWORD PTR _j$41441[ebp], 0
	jmp	SHORT $LN3@evaluate
$LN2@evaluate:
	mov	eax, DWORD PTR _j$41441[ebp]
	add	eax, 1
	mov	DWORD PTR _j$41441[ebp], eax
$LN3@evaluate:
	cmp	DWORD PTR _j$41441[ebp], 4
	jge	SHORT $LN1@evaluate

; 251  :             p += patch[i][j] * B[gridU*4+i] * B[gridV*4+j];

	mov	eax, DWORD PTR _gridV$[ebp]
	mov	ecx, DWORD PTR _j$41441[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _B$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _gridU$[ebp]
	mov	eax, DWORD PTR _i$41437[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _B$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _i$41437[ebp]
	imul	ecx, 48					; 00000030H
	add	ecx, DWORD PTR _patch$[ebp]
	mov	edx, DWORD PTR _j$41441[ebp]
	imul	edx, 12					; 0000000cH
	add	ecx, edx
	push	ecx
	lea	eax, DWORD PTR $T42436[ebp]
	push	eax
	call	??$?DM@detail@glm@@YA?AU?$tvec3@M@01@ABU201@ABM@Z ; glm::detail::operator*<float>
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T42437[ebp]
	push	ecx
	call	??$?DM@detail@glm@@YA?AU?$tvec3@M@01@ABU201@ABM@Z ; glm::detail::operator*<float>
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	call	??$?YM@?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z ; glm::detail::tvec3<float>::operator+=<float>

; 252  :         }

	jmp	SHORT $LN2@evaluate
$LN1@evaluate:

; 253  :     }

	jmp	$LN5@evaluate
$LN4@evaluate:

; 254  :     return p;

	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABU012@@Z	; glm::detail::tvec3<float>::tvec3<float>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 255  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@evaluate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN11@evaluate:
	DD	1
	DD	$LN10@evaluate
$LN10@evaluate:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN9@evaluate
$LN9@evaluate:
	DB	112					; 00000070H
	DB	0
?evaluate@VBOTeapot@@AAE?AU?$tvec3@M@detail@glm@@HHPAMQAY03U234@@Z ENDP ; VBOTeapot::evaluate
_TEXT	ENDS
PUBLIC	??$normalize@M@glm@@YA?AU?$tvec3@M@detail@0@ABU120@@Z ; glm::normalize<float>
PUBLIC	??$cross@M@glm@@YA?AU?$tvec3@M@detail@0@ABU120@0@Z ; glm::cross<float>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?evaluateNormal@VBOTeapot@@AAE?AU?$tvec3@M@detail@glm@@HHPAM0QAY03U234@@Z
_TEXT	SEGMENT
$T42443 = -436						; size = 4
$T42444 = -424						; size = 4
$T42445 = -412						; size = 4
$T42446 = -400						; size = 4
$T42447 = -388						; size = 4
$T42448 = -376						; size = 4
$T42449 = -364						; size = 12
$T42450 = -344						; size = 12
$T42451 = -324						; size = 12
$T42452 = -304						; size = 12
$T42453 = -284						; size = 12
_j$41489 = -72						; size = 4
_i$41485 = -60						; size = 4
_dv$ = -48						; size = 12
_du$ = -28						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_gridU$ = 12						; size = 4
_gridV$ = 16						; size = 4
_B$ = 20						; size = 4
_dB$ = 24						; size = 4
_patch$ = 28						; size = 4
?evaluateNormal@VBOTeapot@@AAE?AU?$tvec3@M@detail@glm@@HHPAM0QAY03U234@@Z PROC ; VBOTeapot::evaluateNormal, COMDAT
; _this$ = ecx

; 258  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 440				; 000001b8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-440]
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 259  :     vec3 du(0.0f,0.0f,0.0f);

	fldz
	fstp	DWORD PTR $T42443[ebp]
	fldz
	fstp	DWORD PTR $T42444[ebp]
	fldz
	fstp	DWORD PTR $T42445[ebp]
	lea	eax, DWORD PTR $T42443[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42444[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42445[ebp]
	push	edx
	lea	ecx, DWORD PTR _du$[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>

; 260  :     vec3 dv(0.0f,0.0f,0.0f);

	fldz
	fstp	DWORD PTR $T42446[ebp]
	fldz
	fstp	DWORD PTR $T42447[ebp]
	fldz
	fstp	DWORD PTR $T42448[ebp]
	lea	eax, DWORD PTR $T42446[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42447[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42448[ebp]
	push	edx
	lea	ecx, DWORD PTR _dv$[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>

; 261  : 
; 262  :     for( int i = 0; i < 4; i++) {

	mov	DWORD PTR _i$41485[ebp], 0
	jmp	SHORT $LN6@evaluateNo
$LN5@evaluateNo:
	mov	eax, DWORD PTR _i$41485[ebp]
	add	eax, 1
	mov	DWORD PTR _i$41485[ebp], eax
$LN6@evaluateNo:
	cmp	DWORD PTR _i$41485[ebp], 4
	jge	$LN4@evaluateNo

; 263  :         for( int j = 0; j < 4; j++) {

	mov	DWORD PTR _j$41489[ebp], 0
	jmp	SHORT $LN3@evaluateNo
$LN2@evaluateNo:
	mov	eax, DWORD PTR _j$41489[ebp]
	add	eax, 1
	mov	DWORD PTR _j$41489[ebp], eax
$LN3@evaluateNo:
	cmp	DWORD PTR _j$41489[ebp], 4
	jge	$LN1@evaluateNo

; 264  :             du += patch[i][j] * dB[gridU*4+i] * B[gridV*4+j];

	mov	eax, DWORD PTR _gridV$[ebp]
	mov	ecx, DWORD PTR _j$41489[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _B$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _gridU$[ebp]
	mov	eax, DWORD PTR _i$41485[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _dB$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _i$41485[ebp]
	imul	ecx, 48					; 00000030H
	add	ecx, DWORD PTR _patch$[ebp]
	mov	edx, DWORD PTR _j$41489[ebp]
	imul	edx, 12					; 0000000cH
	add	ecx, edx
	push	ecx
	lea	eax, DWORD PTR $T42449[ebp]
	push	eax
	call	??$?DM@detail@glm@@YA?AU?$tvec3@M@01@ABU201@ABM@Z ; glm::detail::operator*<float>
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T42450[ebp]
	push	ecx
	call	??$?DM@detail@glm@@YA?AU?$tvec3@M@01@ABU201@ABM@Z ; glm::detail::operator*<float>
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _du$[ebp]
	call	??$?YM@?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z ; glm::detail::tvec3<float>::operator+=<float>

; 265  :             dv += patch[i][j] * B[gridU*4+i] * dB[gridV*4+j];

	mov	eax, DWORD PTR _gridV$[ebp]
	mov	ecx, DWORD PTR _j$41489[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _dB$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _gridU$[ebp]
	mov	eax, DWORD PTR _i$41485[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _B$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _i$41485[ebp]
	imul	ecx, 48					; 00000030H
	add	ecx, DWORD PTR _patch$[ebp]
	mov	edx, DWORD PTR _j$41489[ebp]
	imul	edx, 12					; 0000000cH
	add	ecx, edx
	push	ecx
	lea	eax, DWORD PTR $T42451[ebp]
	push	eax
	call	??$?DM@detail@glm@@YA?AU?$tvec3@M@01@ABU201@ABM@Z ; glm::detail::operator*<float>
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T42452[ebp]
	push	ecx
	call	??$?DM@detail@glm@@YA?AU?$tvec3@M@01@ABU201@ABM@Z ; glm::detail::operator*<float>
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _dv$[ebp]
	call	??$?YM@?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z ; glm::detail::tvec3<float>::operator+=<float>

; 266  :         }

	jmp	$LN2@evaluateNo
$LN1@evaluateNo:

; 267  :     }

	jmp	$LN5@evaluateNo
$LN4@evaluateNo:

; 268  :     return glm::normalize( glm::cross( du, dv ) );

	lea	eax, DWORD PTR _dv$[ebp]
	push	eax
	lea	ecx, DWORD PTR _du$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42453[ebp]
	push	edx
	call	??$cross@M@glm@@YA?AU?$tvec3@M@detail@0@ABU120@0@Z ; glm::cross<float>
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??$normalize@M@glm@@YA?AU?$tvec3@M@detail@0@ABU120@@Z ; glm::normalize<float>
	add	esp, 8
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 269  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@evaluateNo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 440				; 000001b8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	3
$LN12@evaluateNo:
	DD	2
	DD	$LN11@evaluateNo
$LN11@evaluateNo:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN9@evaluateNo
	DD	-48					; ffffffd0H
	DD	12					; 0000000cH
	DD	$LN10@evaluateNo
$LN10@evaluateNo:
	DB	100					; 00000064H
	DB	118					; 00000076H
	DB	0
$LN9@evaluateNo:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	0
?evaluateNormal@VBOTeapot@@AAE?AU?$tvec3@M@detail@glm@@HHPAM0QAY03U234@@Z ENDP ; VBOTeapot::evaluateNormal
_TEXT	ENDS
EXTRN	__imp__glDrawElements@16:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?render@VBOTeapot@@UBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?render@VBOTeapot@@UBEXXZ PROC				; VBOTeapot::render, COMDAT
; _this$ = ecx

; 271  : void VBOTeapot::render() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 272  :     glBindVertexArray(vaoHandle);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR __imp____glewBindVertexArray
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 273  :     glDrawElements(GL_TRIANGLES, 6 * faces, GL_UNSIGNED_INT, ((GLubyte *)NULL + (0)));

	mov	esi, esp
	push	0
	push	5125					; 00001405H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 6
	push	ecx
	push	4
	call	DWORD PTR __imp__glDrawElements@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 274  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?render@VBOTeapot@@UBEXXZ ENDP				; VBOTeapot::render
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\opengl\glm-0.9.3.1\glm\core\type_vec3.inl
_TEXT	ENDS
;	COMDAT ??0?$tvec3@M@detail@glm@@QAE@ABM00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_s0$ = 8						; size = 4
_s1$ = 12						; size = 4
_s2$ = 16						; size = 4
??0?$tvec3@M@detail@glm@@QAE@ABM00@Z PROC		; glm::detail::tvec3<float>::tvec3<float>, COMDAT
; _this$ = ecx

; 113  : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s0$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s1$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s2$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@M@detail@glm@@QAE@ABM00@Z ENDP		; glm::detail::tvec3<float>::tvec3<float>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$tvec3@M@detail@glm@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??0?$tvec3@M@detail@glm@@QAE@ABU012@@Z PROC		; glm::detail::tvec3<float>::tvec3<float>, COMDAT
; _this$ = ecx

; 88   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tvec3@M@detail@glm@@QAE@ABU012@@Z ENDP		; glm::detail::tvec3<float>::tvec3<float>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$tvec3@M@detail@glm@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$tvec3@M@detail@glm@@QAE@XZ PROC			; glm::detail::tvec3<float>::tvec3<float>, COMDAT
; _this$ = ecx

; 71   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tvec3@M@detail@glm@@QAE@XZ ENDP			; glm::detail::tvec3<float>::tvec3<float>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??4?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??4?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z PROC	; glm::detail::tvec3<float>::operator=, COMDAT
; _this$ = ecx

; 236  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 237  : 		this->x = v.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 238  : 		this->y = v.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]

; 239  : 		this->z = v.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]

; 240  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 241  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z ENDP	; glm::detail::tvec3<float>::operator=
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\opengl\glm-0.9.3.1\glm\core\type_vec4.inl
_TEXT	ENDS
;	COMDAT ??0?$tvec4@M@detail@glm@@QAE@ABM000@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_s3$ = 16						; size = 4
_s4$ = 20						; size = 4
??0?$tvec4@M@detail@glm@@QAE@ABM000@Z PROC		; glm::detail::tvec4<float>::tvec4<float>, COMDAT
; _this$ = ecx

; 118  : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s1$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s2$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s3$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s4$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0?$tvec4@M@detail@glm@@QAE@ABM000@Z ENDP		; glm::detail::tvec4<float>::tvec4<float>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??4?$tvec4@M@detail@glm@@QAEAAU012@ABU012@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??4?$tvec4@M@detail@glm@@QAEAAU012@ABU012@@Z PROC	; glm::detail::tvec4<float>::operator=, COMDAT
; _this$ = ecx

; 375  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 376  : 		this->x = v.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 377  : 		this->y = v.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]

; 378  : 		this->z = v.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]

; 379  : 		this->w = v.w;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax+12]

; 380  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 381  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$tvec4@M@detail@glm@@QAEAAU012@ABU012@@Z ENDP	; glm::detail::tvec4<float>::operator=
_TEXT	ENDS
PUBLIC	??0?$tvec4@M@detail@glm@@QAE@XZ			; glm::detail::tvec4<float>::tvec4<float>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\opengl\glm-0.9.3.1\glm\core\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M@detail@glm@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_m$ = 8							; size = 4
??0?$tmat4x4@M@detail@glm@@QAE@ABU012@@Z PROC		; glm::detail::tmat4x4<float>::tmat4x4<float>, COMDAT
; _this$ = ecx

; 94   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0?$tvec4@M@detail@glm@@QAE@XZ	; glm::detail::tvec4<float>::tvec4<float>
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 95   :         this->value[0] = m.value[0];

	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$tvec4@M@detail@glm@@QAEAAU012@ABU012@@Z ; glm::detail::tvec4<float>::operator=

; 96   :         this->value[1] = m.value[1];

	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??4?$tvec4@M@detail@glm@@QAEAAU012@ABU012@@Z ; glm::detail::tvec4<float>::operator=

; 97   :         this->value[2] = m.value[2];

	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4?$tvec4@M@detail@glm@@QAEAAU012@ABU012@@Z ; glm::detail::tvec4<float>::operator=

; 98   :         this->value[3] = m.value[3];

	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??4?$tvec4@M@detail@glm@@QAEAAU012@ABU012@@Z ; glm::detail::tvec4<float>::operator=

; 99   :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M@detail@glm@@QAE@ABU012@@Z ENDP		; glm::detail::tmat4x4<float>::tmat4x4<float>
_TEXT	ENDS
PUBLIC	??A?$tvec4@M@detail@glm@@QBEABMI@Z		; glm::detail::tvec4<float>::operator[]
PUBLIC	??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z ; glm::detail::tmat4x4<float>::operator[]
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$?DM@detail@glm@@YA?AU?$tvec4@M@01@ABU?$tmat4x4@M@01@ABU201@@Z
_TEXT	SEGMENT
tv352 = -336						; size = 8
tv350 = -328						; size = 8
tv348 = -320						; size = 8
tv346 = -312						; size = 8
tv344 = -304						; size = 8
tv342 = -296						; size = 8
tv340 = -288						; size = 8
tv338 = -280						; size = 8
tv336 = -272						; size = 8
tv334 = -264						; size = 8
tv332 = -256						; size = 8
tv330 = -248						; size = 8
$T42476 = -236						; size = 4
$T42477 = -224						; size = 4
$T42478 = -212						; size = 4
$T42479 = -200						; size = 4
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
_v$ = 16						; size = 4
??$?DM@detail@glm@@YA?AU?$tvec4@M@01@ABU?$tmat4x4@M@01@ABU201@@Z PROC ; glm::detail::operator*<float>, COMDAT

; 694  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 695  :         return typename tmat4x4<T>::col_type(
; 696  :             m[0][0] * v.x + m[1][0] * v.y + m[2][0] * v.z + m[3][0] * v.w,
; 697  :             m[0][1] * v.x + m[1][1] * v.y + m[2][1] * v.z + m[3][1] * v.w,
; 698  :             m[0][2] * v.x + m[1][2] * v.y + m[2][2] * v.z + m[3][2] * v.w,
; 699  :             m[0][3] * v.x + m[1][3] * v.y + m[2][3] * v.z + m[3][3] * v.w);

	push	3
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z ; glm::detail::tmat4x4<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec4<float>::operator[]
	fld	DWORD PTR [eax]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax]
	push	3
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR tv330[ebp]
	call	??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z ; glm::detail::tmat4x4<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec4<float>::operator[]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx+4]
	fadd	QWORD PTR tv330[ebp]
	push	3
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR tv332[ebp]
	call	??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z ; glm::detail::tmat4x4<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec4<float>::operator[]
	fld	DWORD PTR [eax]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx+8]
	fadd	QWORD PTR tv332[ebp]
	push	3
	push	3
	mov	ecx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR tv334[ebp]
	call	??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z ; glm::detail::tmat4x4<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec4<float>::operator[]
	fld	DWORD PTR [eax]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax+12]
	fadd	QWORD PTR tv334[ebp]
	fstp	DWORD PTR $T42476[ebp]
	push	2
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z ; glm::detail::tmat4x4<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec4<float>::operator[]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx]
	push	2
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR tv336[ebp]
	call	??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z ; glm::detail::tmat4x4<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec4<float>::operator[]
	fld	DWORD PTR [eax]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx+4]
	fadd	QWORD PTR tv336[ebp]
	push	2
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR tv338[ebp]
	call	??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z ; glm::detail::tmat4x4<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec4<float>::operator[]
	fld	DWORD PTR [eax]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax+8]
	fadd	QWORD PTR tv338[ebp]
	push	2
	push	3
	mov	ecx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR tv340[ebp]
	call	??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z ; glm::detail::tmat4x4<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec4<float>::operator[]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx+12]
	fadd	QWORD PTR tv340[ebp]
	fstp	DWORD PTR $T42477[ebp]
	push	1
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z ; glm::detail::tmat4x4<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec4<float>::operator[]
	fld	DWORD PTR [eax]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx]
	push	1
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR tv342[ebp]
	call	??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z ; glm::detail::tmat4x4<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec4<float>::operator[]
	fld	DWORD PTR [eax]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax+4]
	fadd	QWORD PTR tv342[ebp]
	push	1
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR tv344[ebp]
	call	??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z ; glm::detail::tmat4x4<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec4<float>::operator[]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx+8]
	fadd	QWORD PTR tv344[ebp]
	push	1
	push	3
	mov	ecx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR tv346[ebp]
	call	??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z ; glm::detail::tmat4x4<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec4<float>::operator[]
	fld	DWORD PTR [eax]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx+12]
	fadd	QWORD PTR tv346[ebp]
	fstp	DWORD PTR $T42478[ebp]
	push	0
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z ; glm::detail::tmat4x4<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec4<float>::operator[]
	fld	DWORD PTR [eax]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax]
	push	0
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR tv348[ebp]
	call	??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z ; glm::detail::tmat4x4<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec4<float>::operator[]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx+4]
	fadd	QWORD PTR tv348[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR tv350[ebp]
	call	??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z ; glm::detail::tmat4x4<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec4<float>::operator[]
	fld	DWORD PTR [eax]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx+8]
	fadd	QWORD PTR tv350[ebp]
	push	0
	push	3
	mov	ecx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR tv352[ebp]
	call	??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z ; glm::detail::tmat4x4<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec4<float>::operator[]
	fld	DWORD PTR [eax]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax+12]
	fadd	QWORD PTR tv352[ebp]
	fstp	DWORD PTR $T42479[ebp]
	lea	ecx, DWORD PTR $T42476[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42477[ebp]
	push	edx
	lea	eax, DWORD PTR $T42478[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42479[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$tvec4@M@detail@glm@@QAE@ABM000@Z	; glm::detail::tvec4<float>::tvec4<float>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 700  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?DM@detail@glm@@YA?AU?$tvec4@M@01@ABU?$tmat4x4@M@01@ABU201@@Z ENDP ; glm::detail::operator*<float>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\opengl\glm-0.9.3.1\glm\core\type_mat3x3.inl
_TEXT	ENDS
;	COMDAT ??0?$tmat3x3@M@detail@glm@@QAE@ABU?$tvec3@M@12@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??0?$tmat3x3@M@detail@glm@@QAE@ABU?$tvec3@M@12@00@Z PROC ; glm::detail::tmat3x3<float>::tmat3x3<float>, COMDAT
; _this$ = ecx

; 138  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0?$tvec3@M@detail@glm@@QAE@XZ	; glm::detail::tvec3<float>::tvec3<float>
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 139  :         this->value[0] = v0;

	mov	eax, DWORD PTR _v0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z ; glm::detail::tvec3<float>::operator=

; 140  :         this->value[1] = v1;

	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z ; glm::detail::tvec3<float>::operator=

; 141  :         this->value[2] = v2;

	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z ; glm::detail::tvec3<float>::operator=

; 142  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0?$tmat3x3@M@detail@glm@@QAE@ABU?$tvec3@M@12@00@Z ENDP ; glm::detail::tmat3x3<float>::tmat3x3<float>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$tmat3x3@M@detail@glm@@QAE@ABM@Z
_TEXT	SEGMENT
$T42484 = -272						; size = 12
$T42485 = -252						; size = 12
$T42486 = -232						; size = 12
_Zero$ = -20						; size = 4
_this$ = -8						; size = 4
_s$ = 8							; size = 4
??0?$tmat3x3@M@detail@glm@@QAE@ABM@Z PROC		; glm::detail::tmat3x3<float>::tmat3x3<float>, COMDAT
; _this$ = ecx

; 111  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0?$tvec3@M@detail@glm@@QAE@XZ	; glm::detail::tvec3<float>::tvec3<float>
	push	3
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 112  : 		value_type const Zero(0);

	fldz
	fstp	DWORD PTR _Zero$[ebp]

; 113  :         this->value[0] = col_type(s, Zero, Zero);

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Zero$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T42484[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z ; glm::detail::tvec3<float>::operator=

; 114  :         this->value[1] = col_type(Zero, s, Zero);

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Zero$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T42485[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z ; glm::detail::tvec3<float>::operator=

; 115  :         this->value[2] = col_type(Zero, Zero, s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Zero$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Zero$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T42486[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z ; glm::detail::tvec3<float>::operator=

; 116  :     }

	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@tmat3x3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN5@tmat3x3:
	DD	1
	DD	$LN4@tmat3x3
$LN4@tmat3x3:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@tmat3x3
$LN3@tmat3x3:
	DB	90					; 0000005aH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	0
??0?$tmat3x3@M@detail@glm@@QAE@ABM@Z ENDP		; glm::detail::tmat3x3<float>::tmat3x3<float>
_TEXT	ENDS
PUBLIC	??A?$tvec3@M@detail@glm@@QBEABMI@Z		; glm::detail::tvec3<float>::operator[]
PUBLIC	??A?$tmat3x3@M@detail@glm@@QBEABU?$tvec3@M@12@I@Z ; glm::detail::tmat3x3<float>::operator[]
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$?DM@detail@glm@@YA?AU?$tvec3@M@01@ABU?$tmat3x3@M@01@ABU201@@Z
_TEXT	SEGMENT
tv240 = -276						; size = 8
tv238 = -268						; size = 8
tv236 = -260						; size = 8
tv234 = -252						; size = 8
tv232 = -244						; size = 8
tv230 = -236						; size = 8
$T42492 = -224						; size = 4
$T42493 = -212						; size = 4
$T42494 = -200						; size = 4
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
_v$ = 16						; size = 4
??$?DM@detail@glm@@YA?AU?$tvec3@M@01@ABU?$tmat3x3@M@01@ABU201@@Z PROC ; glm::detail::operator*<float>, COMDAT

; 595  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 596  :         return typename tmat3x3<T>::col_type(
; 597  :             m[0][0] * v.x + m[1][0] * v.y + m[2][0] * v.z,
; 598  :             m[0][1] * v.x + m[1][1] * v.y + m[2][1] * v.z,
; 599  :             m[0][2] * v.x + m[1][2] * v.y + m[2][2] * v.z);

	push	2
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$tmat3x3@M@detail@glm@@QBEABU?$tvec3@M@12@I@Z ; glm::detail::tmat3x3<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec3@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec3<float>::operator[]
	fld	DWORD PTR [eax]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax]
	push	2
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR tv230[ebp]
	call	??A?$tmat3x3@M@detail@glm@@QBEABU?$tvec3@M@12@I@Z ; glm::detail::tmat3x3<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec3@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec3<float>::operator[]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx+4]
	fadd	QWORD PTR tv230[ebp]
	push	2
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR tv232[ebp]
	call	??A?$tmat3x3@M@detail@glm@@QBEABU?$tvec3@M@12@I@Z ; glm::detail::tmat3x3<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec3@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec3<float>::operator[]
	fld	DWORD PTR [eax]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx+8]
	fadd	QWORD PTR tv232[ebp]
	fstp	DWORD PTR $T42492[ebp]
	push	1
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$tmat3x3@M@detail@glm@@QBEABU?$tvec3@M@12@I@Z ; glm::detail::tmat3x3<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec3@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec3<float>::operator[]
	fld	DWORD PTR [eax]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax]
	push	1
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR tv234[ebp]
	call	??A?$tmat3x3@M@detail@glm@@QBEABU?$tvec3@M@12@I@Z ; glm::detail::tmat3x3<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec3@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec3<float>::operator[]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx+4]
	fadd	QWORD PTR tv234[ebp]
	push	1
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR tv236[ebp]
	call	??A?$tmat3x3@M@detail@glm@@QBEABU?$tvec3@M@12@I@Z ; glm::detail::tmat3x3<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec3@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec3<float>::operator[]
	fld	DWORD PTR [eax]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx+8]
	fadd	QWORD PTR tv236[ebp]
	fstp	DWORD PTR $T42493[ebp]
	push	0
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??A?$tmat3x3@M@detail@glm@@QBEABU?$tvec3@M@12@I@Z ; glm::detail::tmat3x3<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec3@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec3<float>::operator[]
	fld	DWORD PTR [eax]
	mov	eax, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [eax]
	push	0
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR tv238[ebp]
	call	??A?$tmat3x3@M@detail@glm@@QBEABU?$tvec3@M@12@I@Z ; glm::detail::tmat3x3<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec3@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec3<float>::operator[]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [ecx+4]
	fadd	QWORD PTR tv238[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR tv240[ebp]
	call	??A?$tmat3x3@M@detail@glm@@QBEABU?$tvec3@M@12@I@Z ; glm::detail::tmat3x3<float>::operator[]
	mov	ecx, eax
	call	??A?$tvec3@M@detail@glm@@QBEABMI@Z	; glm::detail::tvec3<float>::operator[]
	fld	DWORD PTR [eax]
	mov	edx, DWORD PTR _v$[ebp]
	fmul	DWORD PTR [edx+8]
	fadd	QWORD PTR tv240[ebp]
	fstp	DWORD PTR $T42494[ebp]
	lea	eax, DWORD PTR $T42492[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42493[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42494[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 600  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?DM@detail@glm@@YA?AU?$tvec3@M@01@ABU?$tmat3x3@M@01@ABU201@@Z ENDP ; glm::detail::operator*<float>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\opengl\glm-0.9.3.1\glm\core\type_vec3.inl
_TEXT	ENDS
;	COMDAT ??$?GM@detail@glm@@YA?AU?$tvec3@M@01@ABU201@@Z
_TEXT	SEGMENT
$T42497 = -224						; size = 4
$T42498 = -212						; size = 4
$T42499 = -200						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??$?GM@detail@glm@@YA?AU?$tvec3@M@01@ABU201@@Z PROC	; glm::detail::operator-<float>, COMDAT

; 809  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 810  : 		return tvec3<T>(
; 811  : 			-v.x, 
; 812  : 			-v.y, 
; 813  : 			-v.z);

	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	fstp	DWORD PTR $T42497[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+4]
	fchs
	fstp	DWORD PTR $T42498[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx]
	fchs
	fstp	DWORD PTR $T42499[ebp]
	lea	eax, DWORD PTR $T42497[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42498[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42499[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 814  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?GM@detail@glm@@YA?AU?$tvec3@M@01@ABU201@@Z ENDP	; glm::detail::operator-<float>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?DM@detail@glm@@YA?AU?$tvec3@M@01@ABU201@ABM@Z
_TEXT	SEGMENT
$T42502 = -224						; size = 4
$T42503 = -212						; size = 4
$T42504 = -200						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_s$ = 16						; size = 4
??$?DM@detail@glm@@YA?AU?$tvec3@M@01@ABU201@ABM@Z PROC	; glm::detail::operator*<float>, COMDAT

; 730  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 731  : 		return tvec3<T>(
; 732  : 			v.x * T(s),
; 733  : 			v.y * T(s),
; 734  : 			v.z * T(s));

	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _s$[ebp]
	fmul	DWORD PTR [ecx]
	fstp	DWORD PTR $T42502[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _s$[ebp]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR $T42503[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _s$[ebp]
	fmul	DWORD PTR [edx]
	fstp	DWORD PTR $T42504[ebp]
	lea	eax, DWORD PTR $T42502[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42503[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42504[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 735  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?DM@detail@glm@@YA?AU?$tvec3@M@01@ABU201@ABM@Z ENDP	; glm::detail::operator*<float>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?YM@?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??$?YM@?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z PROC	; glm::detail::tvec3<float>::operator+=<float>, COMDAT
; _this$ = ecx

; 275  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 276  : 		this->x += T(v.x);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 277  : 		this->y += T(v.y);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _v$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 278  : 		this->z += T(v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 279  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 280  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?YM@?$tvec3@M@detail@glm@@QAEAAU012@ABU012@@Z ENDP	; glm::detail::tvec3<float>::operator+=<float>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\opengl\glm-0.9.3.1\glm\core\func_geometric.inl
_TEXT	ENDS
;	COMDAT ??$cross@M@glm@@YA?AU?$tvec3@M@detail@0@ABU120@0@Z
_TEXT	SEGMENT
$T42509 = -224						; size = 4
$T42510 = -212						; size = 4
$T42511 = -200						; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
??$cross@M@glm@@YA?AU?$tvec3@M@detail@0@ABU120@0@Z PROC	; glm::cross<float>, COMDAT

; 204  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 205  : 		GLM_STATIC_ASSERT(detail::type<T>::is_float, "'cross' only accept floating-point inputs");
; 206  : 
; 207  :         return detail::tvec3<T>(
; 208  :             x.y * y.z - y.y * x.z,
; 209  :             x.z * y.x - y.z * x.x,
; 210  :             x.x * y.y - y.x * x.y);

	mov	eax, DWORD PTR _x$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _y$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _y$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _x$[ebp]
	fmul	DWORD PTR [eax+4]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR $T42509[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _y$[ebp]
	fmul	DWORD PTR [edx]
	mov	eax, DWORD PTR _y$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _x$[ebp]
	fmul	DWORD PTR [ecx]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR $T42510[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _y$[ebp]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _y$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _x$[ebp]
	fmul	DWORD PTR [edx+8]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR $T42511[ebp]
	lea	eax, DWORD PTR $T42509[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42510[ebp]
	push	ecx
	lea	edx, DWORD PTR $T42511[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$tvec3@M@detail@glm@@QAE@ABM00@Z	; glm::detail::tvec3<float>::tvec3<float>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 211  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$cross@M@glm@@YA?AU?$tvec3@M@detail@0@ABU120@0@Z ENDP	; glm::cross<float>
_TEXT	ENDS
PUBLIC	??$inversesqrt@M@glm@@YAMABM@Z			; glm::inversesqrt<float>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$normalize@M@glm@@YA?AU?$tvec3@M@detail@0@ABU120@@Z
_TEXT	SEGMENT
$T42514 = -212						; size = 4
_sqr$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$normalize@M@glm@@YA?AU?$tvec3@M@detail@0@ABU120@@Z PROC ; glm::normalize<float>, COMDAT

; 243  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 244  :         GLM_STATIC_ASSERT(detail::type<T>::is_float, "'normalize' only accept floating-point inputs");
; 245  : 
; 246  : 		typename detail::tvec3<T>::value_type sqr = x.x * x.x + x.y * x.y + x.z * x.z;

	mov	eax, DWORD PTR _x$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _x$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _x$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _x$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _x$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _x$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _sqr$[ebp]

; 247  : 	    return x * inversesqrt(sqr);

	lea	eax, DWORD PTR _sqr$[ebp]
	push	eax
	call	??$inversesqrt@M@glm@@YAMABM@Z		; glm::inversesqrt<float>
	add	esp, 4
	fstp	DWORD PTR $T42514[ebp]
	lea	ecx, DWORD PTR $T42514[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??$?DM@detail@glm@@YA?AU?$tvec3@M@01@ABU201@ABM@Z ; glm::detail::operator*<float>
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 248  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@normalize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@normalize:
	DD	1
	DD	$LN4@normalize
$LN4@normalize:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@normalize
$LN3@normalize:
	DB	115					; 00000073H
	DB	113					; 00000071H
	DB	114					; 00000072H
	DB	0
??$normalize@M@glm@@YA?AU?$tvec3@M@detail@0@ABU120@@Z ENDP ; glm::normalize<float>
_TEXT	ENDS
PUBLIC	??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FK@IBGOADNM@?$AAc?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AA?2?$AAg?$AAl?$AAm?$AA?9?$AA0?$AA?4?$AA9?$AA?4?$AA3?$AA?4?$AA1?$AA?2?$AAg?$AAl?$AAm?$AA?2?$AAc?$AAo?$AAr?$AAe?$AA?2?$AAt@ ; `string'
PUBLIC	?length@?$tvec3@M@detail@glm@@QBEIXZ		; glm::detail::tvec3<float>::length
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?$AA@
; File c:\opengl\glm-0.9.3.1\glm\core\type_vec3.inl
CONST	SEGMENT
??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?$AA@ DB 'i'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g'
	DB	00H, 't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@IBGOADNM@?$AAc?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AA?2?$AAg?$AAl?$AAm?$AA?9?$AA0?$AA?4?$AA9?$AA?4?$AA3?$AA?4?$AA1?$AA?2?$AAg?$AAl?$AAm?$AA?2?$AAc?$AAo?$AAr?$AAe?$AA?2?$AAt@
CONST	SEGMENT
??_C@_1FK@IBGOADNM@?$AAc?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AA?2?$AAg?$AAl?$AAm?$AA?9?$AA0?$AA?4?$AA9?$AA?4?$AA3?$AA?4?$AA1?$AA?2?$AAg?$AAl?$AAm?$AA?2?$AAc?$AAo?$AAr?$AAe?$AA?2?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'g', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '-'
	DB	00H, '0', 00H, '.', 00H, '9', 00H, '.', 00H, '3', 00H, '.', 00H
	DB	'1', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'r', 00H, 'e', 00H, '\', 00H, 't', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, '3'
	DB	00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??A?$tvec3@M@detail@glm@@QBEABMI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$tvec3@M@detail@glm@@QBEABMI@Z PROC			; glm::detail::tvec3<float>::operator[], COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		assert(i < this->length());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@?$tvec3@M@detail@glm@@QBEIXZ	; glm::detail::tvec3<float>::length
	cmp	DWORD PTR _i$[ebp], eax
	jb	SHORT $LN3@operator
	mov	esi, esp
	push	59					; 0000003bH
	push	OFFSET ??_C@_1FK@IBGOADNM@?$AAc?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AA?2?$AAg?$AAl?$AAm?$AA?9?$AA0?$AA?4?$AA9?$AA?4?$AA3?$AA?4?$AA1?$AA?2?$AAg?$AAl?$AAm?$AA?2?$AAc?$AAo?$AAr?$AAe?$AA?2?$AAt@
	push	OFFSET ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@operator:

; 60   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 61   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$tvec3@M@detail@glm@@QBEABMI@Z ENDP			; glm::detail::tvec3<float>::operator[]
_TEXT	ENDS
PUBLIC	??_C@_1FK@PFPGOKFD@?$AAc?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AA?2?$AAg?$AAl?$AAm?$AA?9?$AA0?$AA?4?$AA9?$AA?4?$AA3?$AA?4?$AA1?$AA?2?$AAg?$AAl?$AAm?$AA?2?$AAc?$AAo?$AAr?$AAe?$AA?2?$AAt@ ; `string'
PUBLIC	?length@?$tvec4@M@detail@glm@@QBEIXZ		; glm::detail::tvec4<float>::length
;	COMDAT ??_C@_1FK@PFPGOKFD@?$AAc?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AA?2?$AAg?$AAl?$AAm?$AA?9?$AA0?$AA?4?$AA9?$AA?4?$AA3?$AA?4?$AA1?$AA?2?$AAg?$AAl?$AAm?$AA?2?$AAc?$AAo?$AAr?$AAe?$AA?2?$AAt@
; File c:\opengl\glm-0.9.3.1\glm\core\type_vec4.inl
CONST	SEGMENT
??_C@_1FK@PFPGOKFD@?$AAc?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AA?2?$AAg?$AAl?$AAm?$AA?9?$AA0?$AA?4?$AA9?$AA?4?$AA3?$AA?4?$AA1?$AA?2?$AAg?$AAl?$AAm?$AA?2?$AAc?$AAo?$AAr?$AAe?$AA?2?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'g', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '-'
	DB	00H, '0', 00H, '.', 00H, '9', 00H, '.', 00H, '3', 00H, '.', 00H
	DB	'1', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'r', 00H, 'e', 00H, '\', 00H, 't', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, '4'
	DB	00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??A?$tvec4@M@detail@glm@@QBEABMI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$tvec4@M@detail@glm@@QBEABMI@Z PROC			; glm::detail::tvec4<float>::operator[], COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		assert(i < this->length());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@?$tvec4@M@detail@glm@@QBEIXZ	; glm::detail::tvec4<float>::length
	cmp	DWORD PTR _i$[ebp], eax
	jb	SHORT $LN3@operator@2
	mov	esi, esp
	push	59					; 0000003bH
	push	OFFSET ??_C@_1FK@PFPGOKFD@?$AAc?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AA?2?$AAg?$AAl?$AAm?$AA?9?$AA0?$AA?4?$AA9?$AA?4?$AA3?$AA?4?$AA1?$AA?2?$AAg?$AAl?$AAm?$AA?2?$AAc?$AAo?$AAr?$AAe?$AA?2?$AAt@
	push	OFFSET ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@operator@2:

; 60   : 		return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 61   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$tvec4@M@detail@glm@@QBEABMI@Z ENDP			; glm::detail::tvec4<float>::operator[]
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$tvec4@M@detail@glm@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$tvec4@M@detail@glm@@QAE@XZ PROC			; glm::detail::tvec4<float>::tvec4<float>, COMDAT
; _this$ = ecx

; 72   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tvec4@M@detail@glm@@QAE@XZ ENDP			; glm::detail::tvec4<float>::tvec4<float>
_TEXT	ENDS
PUBLIC	??_C@_1FO@LCBJDNCK@?$AAc?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AA?2?$AAg?$AAl?$AAm?$AA?9?$AA0?$AA?4?$AA9?$AA?4?$AA3?$AA?4?$AA1?$AA?2?$AAg?$AAl?$AAm?$AA?2?$AAc?$AAo?$AAr?$AAe?$AA?2?$AAt@ ; `string'
PUBLIC	?length@?$tmat4x4@M@detail@glm@@QBEIXZ		; glm::detail::tmat4x4<float>::length
;	COMDAT ??_C@_1FO@LCBJDNCK@?$AAc?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AA?2?$AAg?$AAl?$AAm?$AA?9?$AA0?$AA?4?$AA9?$AA?4?$AA3?$AA?4?$AA1?$AA?2?$AAg?$AAl?$AAm?$AA?2?$AAc?$AAo?$AAr?$AAe?$AA?2?$AAt@
; File c:\opengl\glm-0.9.3.1\glm\core\type_mat4x4.inl
CONST	SEGMENT
??_C@_1FO@LCBJDNCK@?$AAc?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AA?2?$AAg?$AAl?$AAm?$AA?9?$AA0?$AA?4?$AA9?$AA?4?$AA3?$AA?4?$AA1?$AA?2?$AAg?$AAl?$AAm?$AA?2?$AAc?$AAo?$AAr?$AAe?$AA?2?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'g', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '-'
	DB	00H, '0', 00H, '.', 00H, '9', 00H, '.', 00H, '3', 00H, '.', 00H
	DB	'1', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'r', 00H, 'e', 00H, '\', 00H, 't', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H, '4'
	DB	00H, 'x', 00H, '4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z PROC	; glm::detail::tmat4x4<float>::operator[], COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		assert(i < this->length());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@?$tmat4x4@M@detail@glm@@QBEIXZ	; glm::detail::tmat4x4<float>::length
	cmp	DWORD PTR _i$[ebp], eax
	jb	SHORT $LN3@operator@3
	mov	esi, esp
	push	71					; 00000047H
	push	OFFSET ??_C@_1FO@LCBJDNCK@?$AAc?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AA?2?$AAg?$AAl?$AAm?$AA?9?$AA0?$AA?4?$AA9?$AA?4?$AA3?$AA?4?$AA1?$AA?2?$AAg?$AAl?$AAm?$AA?2?$AAc?$AAo?$AAr?$AAe?$AA?2?$AAt@
	push	OFFSET ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@operator@3:

; 72   : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]

; 73   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$tmat4x4@M@detail@glm@@QBEABU?$tvec4@M@12@I@Z ENDP	; glm::detail::tmat4x4<float>::operator[]
_TEXT	ENDS
PUBLIC	??_C@_1FO@DLHICMNA@?$AAc?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AA?2?$AAg?$AAl?$AAm?$AA?9?$AA0?$AA?4?$AA9?$AA?4?$AA3?$AA?4?$AA1?$AA?2?$AAg?$AAl?$AAm?$AA?2?$AAc?$AAo?$AAr?$AAe?$AA?2?$AAt@ ; `string'
PUBLIC	?length@?$tmat3x3@M@detail@glm@@QBEIXZ		; glm::detail::tmat3x3<float>::length
;	COMDAT ??_C@_1FO@DLHICMNA@?$AAc?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AA?2?$AAg?$AAl?$AAm?$AA?9?$AA0?$AA?4?$AA9?$AA?4?$AA3?$AA?4?$AA1?$AA?2?$AAg?$AAl?$AAm?$AA?2?$AAc?$AAo?$AAr?$AAe?$AA?2?$AAt@
; File c:\opengl\glm-0.9.3.1\glm\core\type_mat3x3.inl
CONST	SEGMENT
??_C@_1FO@DLHICMNA@?$AAc?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AA?2?$AAg?$AAl?$AAm?$AA?9?$AA0?$AA?4?$AA9?$AA?4?$AA3?$AA?4?$AA1?$AA?2?$AAg?$AAl?$AAm?$AA?2?$AAc?$AAo?$AAr?$AAe?$AA?2?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'g', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '-'
	DB	00H, '0', 00H, '.', 00H, '9', 00H, '.', 00H, '3', 00H, '.', 00H
	DB	'1', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'r', 00H, 'e', 00H, '\', 00H, 't', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H, '3'
	DB	00H, 'x', 00H, '3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??A?$tmat3x3@M@detail@glm@@QBEABU?$tvec3@M@12@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$tmat3x3@M@detail@glm@@QBEABU?$tvec3@M@12@I@Z PROC	; glm::detail::tmat3x3<float>::operator[], COMDAT
; _this$ = ecx

; 70   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 		assert(i < this->length());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@?$tmat3x3@M@detail@glm@@QBEIXZ	; glm::detail::tmat3x3<float>::length
	cmp	DWORD PTR _i$[ebp], eax
	jb	SHORT $LN3@operator@4
	mov	esi, esp
	push	71					; 00000047H
	push	OFFSET ??_C@_1FO@DLHICMNA@?$AAc?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AA?2?$AAg?$AAl?$AAm?$AA?9?$AA0?$AA?4?$AA9?$AA?4?$AA3?$AA?4?$AA1?$AA?2?$AAg?$AAl?$AAm?$AA?2?$AAc?$AAo?$AAr?$AAe?$AA?2?$AAt@
	push	OFFSET ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@operator@4:

; 72   : 		return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _this$[ebp]

; 73   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$tmat3x3@M@detail@glm@@QBEABU?$tvec3@M@12@I@Z ENDP	; glm::detail::tmat3x3<float>::operator[]
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\opengl\glm-0.9.3.1\glm\core\func_exponential.inl
;	COMDAT ??$inversesqrt@M@glm@@YAMABM@Z
_TEXT	SEGMENT
tv76 = -196						; size = 4
_x$ = 8							; size = 4
??$inversesqrt@M@glm@@YAMABM@Z PROC			; glm::inversesqrt<float>, COMDAT

; 149  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 150  : 		GLM_STATIC_ASSERT(detail::type<genType>::is_float, "'inversesqrt' only accept floating-point input");
; 151  : 
; 152  :         return genType(1) / ::std::sqrt(x);

	mov	eax, DWORD PTR _x$[ebp]
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR tv76[ebp]
	fld	DWORD PTR tv76[ebp]

; 153  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$inversesqrt@M@glm@@YAMABM@Z ENDP			; glm::inversesqrt<float>
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 542  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 434  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\opengl\glm-0.9.3.1\glm\core\type_vec3.inl
_TEXT	ENDS
;	COMDAT ?length@?$tvec3@M@detail@glm@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?length@?$tvec3@M@detail@glm@@QBEIXZ PROC		; glm::detail::tvec3<float>::length, COMDAT
; _this$ = ecx

; 34   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return 3;

	mov	eax, 3

; 36   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$tvec3@M@detail@glm@@QBEIXZ ENDP		; glm::detail::tvec3<float>::length
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\opengl\glm-0.9.3.1\glm\core\type_vec4.inl
_TEXT	ENDS
;	COMDAT ?length@?$tvec4@M@detail@glm@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?length@?$tvec4@M@detail@glm@@QBEIXZ PROC		; glm::detail::tvec4<float>::length, COMDAT
; _this$ = ecx

; 34   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return 4;

	mov	eax, 4

; 36   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$tvec4@M@detail@glm@@QBEIXZ ENDP		; glm::detail::tvec4<float>::length
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\opengl\glm-0.9.3.1\glm\core\type_mat4x4.inl
_TEXT	ENDS
;	COMDAT ?length@?$tmat4x4@M@detail@glm@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?length@?$tmat4x4@M@detail@glm@@QBEIXZ PROC		; glm::detail::tmat4x4<float>::length, COMDAT
; _this$ = ecx

; 34   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   :         return 4;

	mov	eax, 4

; 36   :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$tmat4x4@M@detail@glm@@QBEIXZ ENDP		; glm::detail::tmat4x4<float>::length
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\opengl\glm-0.9.3.1\glm\core\type_mat3x3.inl
_TEXT	ENDS
;	COMDAT ?length@?$tmat3x3@M@detail@glm@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?length@?$tmat3x3@M@detail@glm@@QBEIXZ PROC		; glm::detail::tmat3x3<float>::length, COMDAT
; _this$ = ecx

; 34   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   :         return 3;

	mov	eax, 3

; 36   :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$tmat3x3@M@detail@glm@@QBEIXZ ENDP		; glm::detail::tmat3x3<float>::length
_TEXT	ENDS
END
