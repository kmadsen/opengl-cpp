; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\kmadsen\Google Drive\OpenGL_Projects\Starter\Starter\vbotorus.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?generateVerts@VBOTorus@@AAEXPAM00PAIMM@Z	; VBOTorus::generateVerts
PUBLIC	??_7VBOTorus@@6B@				; VBOTorus::`vftable'
PUBLIC	??0Drawable@@QAE@XZ				; Drawable::Drawable
PUBLIC	__$ArrayPad$
PUBLIC	??0VBOTorus@@QAE@MMHH@Z				; VBOTorus::VBOTorus
PUBLIC	??_R4VBOTorus@@6B@				; VBOTorus::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVVBOTorus@@@8				; VBOTorus `RTTI Type Descriptor'
PUBLIC	??_R3VBOTorus@@8				; VBOTorus::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VBOTorus@@8				; VBOTorus::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VBOTorus@@8			; VBOTorus::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@Drawable@@8			; Drawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVDrawable@@@8				; Drawable `RTTI Type Descriptor'
PUBLIC	??_R3Drawable@@8				; Drawable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Drawable@@8				; Drawable::`RTTI Base Class Array'
PUBLIC	?render@VBOTorus@@UBEXXZ			; VBOTorus::render
EXTRN	__imp____glewVertexAttribPointer:DWORD
EXTRN	__imp____glewEnableVertexAttribArray:DWORD
EXTRN	__imp____glewBindVertexArray:DWORD
EXTRN	__imp____glewGenVertexArrays:DWORD
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp____glewBufferData:DWORD
EXTRN	__imp____glewBindBuffer:DWORD
EXTRN	__imp____glewGenBuffers:DWORD
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R2Drawable@@8
; File c:\users\kmadsen\google drive\opengl_projects\starter\starter\vbotorus.cpp
rdata$r	SEGMENT
??_R2Drawable@@8 DD FLAT:??_R1A@?0A@EA@Drawable@@8	; Drawable::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Drawable@@8
rdata$r	SEGMENT
??_R3Drawable@@8 DD 00H					; Drawable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Drawable@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDrawable@@@8
_DATA	SEGMENT
??_R0?AVDrawable@@@8 DD FLAT:??_7type_info@@6B@		; Drawable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDrawable@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@Drawable@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Drawable@@8 DD FLAT:??_R0?AVDrawable@@@8	; Drawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Drawable@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@VBOTorus@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VBOTorus@@8 DD FLAT:??_R0?AVVBOTorus@@@8	; VBOTorus::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VBOTorus@@8
rdata$r	ENDS
;	COMDAT ??_R2VBOTorus@@8
rdata$r	SEGMENT
??_R2VBOTorus@@8 DD FLAT:??_R1A@?0A@EA@VBOTorus@@8	; VBOTorus::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Drawable@@8
rdata$r	ENDS
;	COMDAT ??_R3VBOTorus@@8
rdata$r	SEGMENT
??_R3VBOTorus@@8 DD 00H					; VBOTorus::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2VBOTorus@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVBOTorus@@@8
_DATA	SEGMENT
??_R0?AVVBOTorus@@@8 DD FLAT:??_7type_info@@6B@		; VBOTorus `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVBOTorus@@', 00H
_DATA	ENDS
;	COMDAT ??_R4VBOTorus@@6B@
rdata$r	SEGMENT
??_R4VBOTorus@@6B@ DD 00H				; VBOTorus::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVVBOTorus@@@8
	DD	FLAT:??_R3VBOTorus@@8
rdata$r	ENDS
;	COMDAT ??_7VBOTorus@@6B@
CONST	SEGMENT
??_7VBOTorus@@6B@ DD FLAT:??_R4VBOTorus@@6B@		; VBOTorus::`vftable'
	DD	FLAT:?render@VBOTorus@@UBEXXZ
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0VBOTorus@@QAE@MMHH@Z
_TEXT	SEGMENT
$T17448 = -384						; size = 4
$T17449 = -372						; size = 4
$T17450 = -360						; size = 4
$T17451 = -348						; size = 4
$T17452 = -336						; size = 4
$T17453 = -324						; size = 4
$T17454 = -312						; size = 4
$T17455 = -300						; size = 4
_handle$ = -96						; size = 16
_el$ = -72						; size = 4
_tex$ = -60						; size = 4
_n$ = -48						; size = 4
_v$ = -36						; size = 4
_nVerts$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_outerRadius$ = 8					; size = 4
_innerRadius$ = 12					; size = 4
_nsides$ = 16						; size = 4
_nrings$ = 20						; size = 4
??0VBOTorus@@QAE@MMHH@Z PROC				; VBOTorus::VBOTorus, COMDAT
; _this$ = ecx

; 11   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 388				; 00000184H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-388]
	mov	ecx, 97					; 00000061H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Drawable@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7VBOTorus@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nrings$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nsides$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 12   :     faces = sides * rings;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 13   :     int nVerts  = sides * (rings+1);   // One extra ring to duplicate first ring

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR _nVerts$[ebp], ecx

; 14   : 
; 15   :     // Verts
; 16   :     float * v = new float[3 * nVerts];

	mov	eax, DWORD PTR _nVerts$[ebp]
	imul	eax, 3
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17448[ebp], eax
	mov	eax, DWORD PTR $T17448[ebp]
	mov	DWORD PTR _v$[ebp], eax

; 17   :     // Normals
; 18   :     float * n = new float[3 * nVerts];

	mov	eax, DWORD PTR _nVerts$[ebp]
	imul	eax, 3
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17449[ebp], eax
	mov	eax, DWORD PTR $T17449[ebp]
	mov	DWORD PTR _n$[ebp], eax

; 19   :     // Tex coords
; 20   :     float * tex = new float[2 * nVerts];

	mov	eax, DWORD PTR _nVerts$[ebp]
	shl	eax, 1
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17450[ebp], eax
	mov	eax, DWORD PTR $T17450[ebp]
	mov	DWORD PTR _tex$[ebp], eax

; 21   :     // Elements
; 22   :     unsigned int * el = new unsigned int[6 * faces];

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	imul	eax, 6
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17451[ebp], eax
	mov	eax, DWORD PTR $T17451[ebp]
	mov	DWORD PTR _el$[ebp], eax

; 23   : 
; 24   :     // Generate the vertex data
; 25   :     generateVerts(v, n, tex, el, outerRadius, innerRadius);

	push	ecx
	fld	DWORD PTR _innerRadius$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _outerRadius$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _el$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?generateVerts@VBOTorus@@AAEXPAM00PAIMM@Z ; VBOTorus::generateVerts

; 26   : 
; 27   :     // Create and populate the buffer objects
; 28   :     unsigned int handle[4];
; 29   :     glGenBuffers(4, handle);

	mov	esi, esp
	lea	eax, DWORD PTR _handle$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR __imp____glewGenBuffers
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 30   : 
; 31   :     glBindBuffer(GL_ARRAY_BUFFER, handle[0]);

	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	push	34962					; 00008892H
	mov	ecx, DWORD PTR __imp____glewBindBuffer
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 32   :     glBufferData(GL_ARRAY_BUFFER, (3 * nVerts) * sizeof(float), v, GL_STATIC_DRAW);

	mov	esi, esp
	push	35044					; 000088e4H
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nVerts$[ebp]
	imul	ecx, 3
	shl	ecx, 2
	push	ecx
	push	34962					; 00008892H
	mov	edx, DWORD PTR __imp____glewBufferData
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 33   : 
; 34   :     glBindBuffer(GL_ARRAY_BUFFER, handle[1]);

	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp+4]
	push	eax
	push	34962					; 00008892H
	mov	ecx, DWORD PTR __imp____glewBindBuffer
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 35   :     glBufferData(GL_ARRAY_BUFFER, (3 * nVerts) * sizeof(float), n, GL_STATIC_DRAW);

	mov	esi, esp
	push	35044					; 000088e4H
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nVerts$[ebp]
	imul	ecx, 3
	shl	ecx, 2
	push	ecx
	push	34962					; 00008892H
	mov	edx, DWORD PTR __imp____glewBufferData
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 36   : 
; 37   :     glBindBuffer(GL_ARRAY_BUFFER, handle[2]);

	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp+8]
	push	eax
	push	34962					; 00008892H
	mov	ecx, DWORD PTR __imp____glewBindBuffer
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 38   :     glBufferData(GL_ARRAY_BUFFER, (2 * nVerts) * sizeof(float), tex, GL_STATIC_DRAW);

	mov	esi, esp
	push	35044					; 000088e4H
	mov	eax, DWORD PTR _tex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nVerts$[ebp]
	shl	ecx, 1
	shl	ecx, 2
	push	ecx
	push	34962					; 00008892H
	mov	edx, DWORD PTR __imp____glewBufferData
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 39   : 
; 40   :     glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, handle[3]);

	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp+12]
	push	eax
	push	34963					; 00008893H
	mov	ecx, DWORD PTR __imp____glewBindBuffer
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 41   :     glBufferData(GL_ELEMENT_ARRAY_BUFFER, 6 * faces * sizeof(unsigned int), el, GL_STATIC_DRAW);

	mov	esi, esp
	push	35044					; 000088e4H
	mov	eax, DWORD PTR _el$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	imul	edx, 6
	shl	edx, 2
	push	edx
	push	34963					; 00008893H
	mov	eax, DWORD PTR __imp____glewBufferData
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 42   : 
; 43   :     delete [] v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR $T17452[ebp], eax
	mov	ecx, DWORD PTR $T17452[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 44   :     delete [] n;

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T17453[ebp], eax
	mov	ecx, DWORD PTR $T17453[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 45   :     delete [] el;

	mov	eax, DWORD PTR _el$[ebp]
	mov	DWORD PTR $T17454[ebp], eax
	mov	ecx, DWORD PTR $T17454[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 46   :     delete [] tex;

	mov	eax, DWORD PTR _tex$[ebp]
	mov	DWORD PTR $T17455[ebp], eax
	mov	ecx, DWORD PTR $T17455[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 47   : 
; 48   :     // Create the VAO
; 49   :     glGenVertexArrays( 1, &vaoHandle );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esi, esp
	push	eax
	push	1
	mov	ecx, DWORD PTR __imp____glewGenVertexArrays
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 50   :     glBindVertexArray(vaoHandle);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR __imp____glewBindVertexArray
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 51   : 
; 52   :     glEnableVertexAttribArray(0);  // Vertex position

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __imp____glewEnableVertexAttribArray
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 53   :     glBindBuffer(GL_ARRAY_BUFFER, handle[0]);

	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	push	34962					; 00008892H
	mov	ecx, DWORD PTR __imp____glewBindBuffer
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 54   :     glVertexAttribPointer( (GLuint)0, 3, GL_FLOAT, GL_FALSE, 0, ((GLubyte *)NULL + (0)) );

	mov	esi, esp
	push	0
	push	0
	push	0
	push	5126					; 00001406H
	push	3
	push	0
	mov	eax, DWORD PTR __imp____glewVertexAttribPointer
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 55   : 
; 56   :     glEnableVertexAttribArray(1);  // Vertex normal

	mov	esi, esp
	push	1
	mov	eax, DWORD PTR __imp____glewEnableVertexAttribArray
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 57   :     glBindBuffer(GL_ARRAY_BUFFER, handle[1]);

	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp+4]
	push	eax
	push	34962					; 00008892H
	mov	ecx, DWORD PTR __imp____glewBindBuffer
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 58   :     glVertexAttribPointer( (GLuint)1, 3, GL_FLOAT, GL_FALSE, 0, ((GLubyte *)NULL + (0)) );

	mov	esi, esp
	push	0
	push	0
	push	0
	push	5126					; 00001406H
	push	3
	push	1
	mov	eax, DWORD PTR __imp____glewVertexAttribPointer
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 59   : 
; 60   :     glBindBuffer(GL_ARRAY_BUFFER, handle[2]);

	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp+8]
	push	eax
	push	34962					; 00008892H
	mov	ecx, DWORD PTR __imp____glewBindBuffer
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 61   :     glEnableVertexAttribArray(2);  // Texture coords

	mov	esi, esp
	push	2
	mov	eax, DWORD PTR __imp____glewEnableVertexAttribArray
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 62   :     glVertexAttribPointer( (GLuint)2, 2, GL_FLOAT, GL_FALSE, 0, ((GLubyte *)NULL + (0)) );

	mov	esi, esp
	push	0
	push	0
	push	0
	push	5126					; 00001406H
	push	2
	push	2
	mov	eax, DWORD PTR __imp____glewVertexAttribPointer
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 63   : 
; 64   :     glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, handle[3]);

	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp+12]
	push	eax
	push	34963					; 00008893H
	mov	ecx, DWORD PTR __imp____glewBindBuffer
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 65   : 
; 66   :     glBindVertexArray(0);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __imp____glewBindVertexArray
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 67   : }

	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@VBOTorus
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 388				; 00000184H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN5@VBOTorus:
	DD	1
	DD	$LN4@VBOTorus
$LN4@VBOTorus:
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN3@VBOTorus
$LN3@VBOTorus:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??0VBOTorus@@QAE@MMHH@Z ENDP				; VBOTorus::VBOTorus
_TEXT	ENDS
PUBLIC	??_7Drawable@@6B@				; Drawable::`vftable'
PUBLIC	??_R4Drawable@@6B@				; Drawable::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4Drawable@@6B@
rdata$r	SEGMENT
??_R4Drawable@@6B@ DD 00H				; Drawable::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDrawable@@@8
	DD	FLAT:??_R3Drawable@@8
rdata$r	ENDS
;	COMDAT ??_7Drawable@@6B@
CONST	SEGMENT
??_7Drawable@@6B@ DD FLAT:??_R4Drawable@@6B@		; Drawable::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0Drawable@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Drawable@@QAE@XZ PROC				; Drawable::Drawable, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Drawable@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Drawable@@QAE@XZ ENDP				; Drawable::Drawable
_TEXT	ENDS
EXTRN	__imp__glDrawElements@16:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?render@VBOTorus@@UBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?render@VBOTorus@@UBEXXZ PROC				; VBOTorus::render, COMDAT
; _this$ = ecx

; 69   : void VBOTorus::render() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 70   :     glBindVertexArray(vaoHandle);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR __imp____glewBindVertexArray
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 71   :     glDrawElements(GL_TRIANGLES, 6 * faces, GL_UNSIGNED_INT, ((GLubyte *)NULL + (0)));

	mov	esi, esp
	push	0
	push	5125					; 00001405H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 6
	push	ecx
	push	4
	call	DWORD PTR __imp__glDrawElements@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 72   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?render@VBOTorus@@UBEXXZ ENDP				; VBOTorus::render
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	__real@401921fb54442d18
;	COMDAT __real@401921fb54442d18
CONST	SEGMENT
__real@401921fb54442d18 DQ 0401921fb54442d18r	; 6.28319
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?generateVerts@VBOTorus@@AAEXPAM00PAIMM@Z
_TEXT	SEGMENT
tv367 = -436						; size = 4
_nextSide$17303 = -236					; size = 4
_side$17299 = -224					; size = 4
_nextRingStart$17298 = -212				; size = 4
_ringStart$17297 = -200					; size = 4
_ring$17293 = -188					; size = 4
_len$17292 = -176					; size = 4
_r$17289 = -164						; size = 4
_sv$17288 = -152					; size = 4
_cv$17287 = -140					; size = 4
_v$17286 = -128						; size = 4
_side$17282 = -116					; size = 4
_su$17281 = -104					; size = 4
_cu$17280 = -92						; size = 4
_u$17279 = -80						; size = 4
_ring$17275 = -68					; size = 4
_tidx$ = -56						; size = 4
_idx$ = -44						; size = 4
_sideFactor$ = -32					; size = 4
_ringFactor$ = -20					; size = 4
_this$ = -8						; size = 4
_verts$ = 8						; size = 4
_norms$ = 12						; size = 4
_tex$ = 16						; size = 4
_el$ = 20						; size = 4
_outerRadius$ = 24					; size = 4
_innerRadius$ = 28					; size = 4
?generateVerts@VBOTorus@@AAEXPAM00PAIMM@Z PROC		; VBOTorus::generateVerts, COMDAT
; _this$ = ecx

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 436				; 000001b4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-436]
	mov	ecx, 109				; 0000006dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 78   :     float ringFactor  = (float)(TWOPI / rings);

	mov	eax, DWORD PTR _this$[ebp]
	fild	DWORD PTR [eax+12]
	fdivr	QWORD PTR __real@401921fb54442d18
	fstp	DWORD PTR _ringFactor$[ebp]

; 79   :     float sideFactor = (float)(TWOPI / sides);

	mov	eax, DWORD PTR _this$[ebp]
	fild	DWORD PTR [eax+16]
	fdivr	QWORD PTR __real@401921fb54442d18
	fstp	DWORD PTR _sideFactor$[ebp]

; 80   :     int idx = 0, tidx = 0;

	mov	DWORD PTR _idx$[ebp], 0
	mov	DWORD PTR _tidx$[ebp], 0

; 81   :     for( int ring = 0; ring <= rings; ring++ ) {

	mov	DWORD PTR _ring$17275[ebp], 0
	jmp	SHORT $LN12@generateVe
$LN11@generateVe:
	mov	eax, DWORD PTR _ring$17275[ebp]
	add	eax, 1
	mov	DWORD PTR _ring$17275[ebp], eax
$LN12@generateVe:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ring$17275[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jg	$LN10@generateVe

; 82   :         float u = ring * ringFactor;

	fild	DWORD PTR _ring$17275[ebp]
	fmul	DWORD PTR _ringFactor$[ebp]
	fstp	DWORD PTR _u$17279[ebp]

; 83   :         float cu = cos(u);

	push	ecx
	fld	DWORD PTR _u$17279[ebp]
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cu$17280[ebp]

; 84   :         float su = sin(u);

	push	ecx
	fld	DWORD PTR _u$17279[ebp]
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _su$17281[ebp]

; 85   :         for( int side = 0; side < sides; side++ ) {

	mov	DWORD PTR _side$17282[ebp], 0
	jmp	SHORT $LN9@generateVe
$LN8@generateVe:
	mov	eax, DWORD PTR _side$17282[ebp]
	add	eax, 1
	mov	DWORD PTR _side$17282[ebp], eax
$LN9@generateVe:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _side$17282[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	$LN7@generateVe

; 86   :             float v = side * sideFactor;

	fild	DWORD PTR _side$17282[ebp]
	fmul	DWORD PTR _sideFactor$[ebp]
	fstp	DWORD PTR _v$17286[ebp]

; 87   :             float cv = cos(v);

	push	ecx
	fld	DWORD PTR _v$17286[ebp]
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cv$17287[ebp]

; 88   :             float sv = sin(v);

	push	ecx
	fld	DWORD PTR _v$17286[ebp]
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sv$17288[ebp]

; 89   :             float r = (outerRadius + innerRadius * cv);

	fld	DWORD PTR _innerRadius$[ebp]
	fmul	DWORD PTR _cv$17287[ebp]
	fadd	DWORD PTR _outerRadius$[ebp]
	fstp	DWORD PTR _r$17289[ebp]

; 90   :             verts[idx] = r * cu;

	fld	DWORD PTR _r$17289[ebp]
	fmul	DWORD PTR _cu$17280[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _verts$[ebp]
	fstp	DWORD PTR [ecx+eax*4]

; 91   :             verts[idx + 1] = r * su;

	fld	DWORD PTR _r$17289[ebp]
	fmul	DWORD PTR _su$17281[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _verts$[ebp]
	fstp	DWORD PTR [ecx+eax*4+4]

; 92   :             verts[idx + 2] = innerRadius * sv;

	fld	DWORD PTR _innerRadius$[ebp]
	fmul	DWORD PTR _sv$17288[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _verts$[ebp]
	fstp	DWORD PTR [ecx+eax*4+8]

; 93   :             norms[idx] = cv * cu * r;

	fld	DWORD PTR _cv$17287[ebp]
	fmul	DWORD PTR _cu$17280[ebp]
	fmul	DWORD PTR _r$17289[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _norms$[ebp]
	fstp	DWORD PTR [ecx+eax*4]

; 94   :             norms[idx + 1] = cv * su * r;

	fld	DWORD PTR _cv$17287[ebp]
	fmul	DWORD PTR _su$17281[ebp]
	fmul	DWORD PTR _r$17289[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _norms$[ebp]
	fstp	DWORD PTR [ecx+eax*4+4]

; 95   :             norms[idx + 2] = sv * r;

	fld	DWORD PTR _sv$17288[ebp]
	fmul	DWORD PTR _r$17289[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _norms$[ebp]
	fstp	DWORD PTR [ecx+eax*4+8]

; 96   :             tex[tidx] = (float)(u / TWOPI);

	fld	DWORD PTR _u$17279[ebp]
	fdiv	QWORD PTR __real@401921fb54442d18
	mov	eax, DWORD PTR _tidx$[ebp]
	mov	ecx, DWORD PTR _tex$[ebp]
	fstp	DWORD PTR [ecx+eax*4]

; 97   :             tex[tidx+1] = (float)(v / TWOPI);

	fld	DWORD PTR _v$17286[ebp]
	fdiv	QWORD PTR __real@401921fb54442d18
	mov	eax, DWORD PTR _tidx$[ebp]
	mov	ecx, DWORD PTR _tex$[ebp]
	fstp	DWORD PTR [ecx+eax*4+4]

; 98   :             tidx += 2;

	mov	eax, DWORD PTR _tidx$[ebp]
	add	eax, 2
	mov	DWORD PTR _tidx$[ebp], eax

; 99   :             // Normalize
; 100  :             float len = sqrt( norms[idx] * norms[idx] +
; 101  :                               norms[idx+1] * norms[idx+1] +
; 102  :                               norms[idx+2] * norms[idx+2] );

	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _norms$[ebp]
	fld	DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR _norms$[ebp]
	fmul	DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _norms$[ebp]
	fld	DWORD PTR [edx+ecx*4+4]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _norms$[ebp]
	fmul	DWORD PTR [ecx+eax*4+4]
	faddp	ST(1), ST(0)
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR _norms$[ebp]
	fld	DWORD PTR [eax+edx*4+8]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _norms$[ebp]
	fmul	DWORD PTR [edx+ecx*4+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv367[ebp]
	fld	DWORD PTR tv367[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR _len$17292[ebp]

; 103  :             norms[idx] /= len;

	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _norms$[ebp]
	fld	DWORD PTR [ecx+eax*4]
	fdiv	DWORD PTR _len$17292[ebp]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR _norms$[ebp]
	fstp	DWORD PTR [eax+edx*4]

; 104  :             norms[idx+1] /= len;

	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _norms$[ebp]
	fld	DWORD PTR [ecx+eax*4+4]
	fdiv	DWORD PTR _len$17292[ebp]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR _norms$[ebp]
	fstp	DWORD PTR [eax+edx*4+4]

; 105  :             norms[idx+2] /= len;

	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _norms$[ebp]
	fld	DWORD PTR [ecx+eax*4+8]
	fdiv	DWORD PTR _len$17292[ebp]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR _norms$[ebp]
	fstp	DWORD PTR [eax+edx*4+8]

; 106  :             idx += 3;

	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 3
	mov	DWORD PTR _idx$[ebp], eax

; 107  :         }

	jmp	$LN8@generateVe
$LN7@generateVe:

; 108  :     }

	jmp	$LN11@generateVe
$LN10@generateVe:

; 109  : 
; 110  :     idx = 0;

	mov	DWORD PTR _idx$[ebp], 0

; 111  :     for( int ring = 0; ring < rings; ring++ ) {

	mov	DWORD PTR _ring$17293[ebp], 0
	jmp	SHORT $LN6@generateVe
$LN5@generateVe:
	mov	eax, DWORD PTR _ring$17293[ebp]
	add	eax, 1
	mov	DWORD PTR _ring$17293[ebp], eax
$LN6@generateVe:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ring$17293[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	$LN4@generateVe

; 112  :         int ringStart = ring * sides;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ring$17293[ebp]
	imul	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _ringStart$17297[ebp], ecx

; 113  :         int nextRingStart = (ring + 1) * sides;

	mov	eax, DWORD PTR _ring$17293[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR _nextRingStart$17298[ebp], eax

; 114  :         for( int side = 0; side < sides; side++ ) {

	mov	DWORD PTR _side$17299[ebp], 0
	jmp	SHORT $LN3@generateVe
$LN2@generateVe:
	mov	eax, DWORD PTR _side$17299[ebp]
	add	eax, 1
	mov	DWORD PTR _side$17299[ebp], eax
$LN3@generateVe:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _side$17299[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	$LN1@generateVe

; 115  :             int nextSide = (side+1) % sides;

	mov	eax, DWORD PTR _side$17299[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [ecx+16]
	mov	DWORD PTR _nextSide$17303[ebp], edx

; 116  :             // The quad
; 117  :             el[idx] = (ringStart + side);

	mov	eax, DWORD PTR _ringStart$17297[ebp]
	add	eax, DWORD PTR _side$17299[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _el$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 118  :             el[idx+1] = (nextRingStart + side);

	mov	eax, DWORD PTR _nextRingStart$17298[ebp]
	add	eax, DWORD PTR _side$17299[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _el$[ebp]
	mov	DWORD PTR [edx+ecx*4+4], eax

; 119  :             el[idx+2] = (nextRingStart + nextSide);

	mov	eax, DWORD PTR _nextRingStart$17298[ebp]
	add	eax, DWORD PTR _nextSide$17303[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _el$[ebp]
	mov	DWORD PTR [edx+ecx*4+8], eax

; 120  :             el[idx+3] = ringStart + side;

	mov	eax, DWORD PTR _ringStart$17297[ebp]
	add	eax, DWORD PTR _side$17299[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _el$[ebp]
	mov	DWORD PTR [edx+ecx*4+12], eax

; 121  :             el[idx+4] = nextRingStart + nextSide;

	mov	eax, DWORD PTR _nextRingStart$17298[ebp]
	add	eax, DWORD PTR _nextSide$17303[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _el$[ebp]
	mov	DWORD PTR [edx+ecx*4+16], eax

; 122  :             el[idx+5] = (ringStart + nextSide);

	mov	eax, DWORD PTR _ringStart$17297[ebp]
	add	eax, DWORD PTR _nextSide$17303[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _el$[ebp]
	mov	DWORD PTR [edx+ecx*4+20], eax

; 123  :             idx += 6;

	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 6
	mov	DWORD PTR _idx$[ebp], eax

; 124  :         }

	jmp	$LN2@generateVe
$LN1@generateVe:

; 125  :     }

	jmp	$LN5@generateVe
$LN4@generateVe:

; 126  : 
; 127  : 
; 128  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 436				; 000001b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?generateVerts@VBOTorus@@AAEXPAM00PAIMM@Z ENDP		; VBOTorus::generateVerts
_TEXT	ENDS
PUBLIC	_cosf
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 512  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_cosf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
EXTRN	_cos:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _cosf
_TEXT	SEGMENT
tv73 = -196						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_cos
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
PUBLIC	_sinf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 538  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
EXTRN	_sin:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _sinf
_TEXT	SEGMENT
tv73 = -196						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 542  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 434  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
END
